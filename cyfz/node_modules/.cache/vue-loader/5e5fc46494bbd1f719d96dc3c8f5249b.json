{"remainingRequest":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vueWorkspace\\cyfz\\src\\components\\grid\\TableList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vueWorkspace\\cyfz\\src\\components\\grid\\TableList.vue","mtime":1571369962407},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport tablePage from './TablePage.vue'\nvar elementResizeDetectorMaker = require(\"element-resize-detector\")\nexport default {\n    name: \"TableList\",\n    components: {\n        tablePage,\n    },\n    props: {\n        tableColumnEmpty:{\n            default: '暂无数据',\n            type: String\n        },\n        checkedData:{\n            type:Array,\n            default :function () {\n                return []\n            }\n        },\n        needLoading:{\n            // default: false,\n            type: Boolean\n        },\n        rowCheckboxClick:{\n            default: true,\n            type: Boolean\n        },\n        caption:{\n            type:String\n        },\n        tableScale:{\n            default: 100,\n            type: Number\n        },\n        displayRows: {\n            default: 10,\n            type: Number\n        },\n        dialogTable: {\n            default: false,\n            type: Boolean\n        },\n        selection: { //控制复选框，默认不显示复选框\n            default: false,\n            type: Boolean\n        },\n        index: { //\n            default: false,\n            type: Boolean\n        },\n        getDataWay: Object,//获取table数据的方式\n        highlightCurrentRow: Boolean,//高亮显示选中的行\n        columns: Array, //获取table的列\n        pagination: {},\n        defaultSort: Object,\n        // height: Number,\n        stripe: {\n            default: true,\n            type: Boolean\n        },\n        tableSize:{\n            default:'中',\n            type: String\n        },\n        spanMethod:{\n            default:function () {\n\n            },\n            type: Function\n        },\n        rowClassName:{\n            default:function () {\n\n            },\n            type: Function\n        }\n    },\n    data: function () {\n        return {\n            loading: false,\n            border: false,\n            dropCol: this.columns,\n            rowHeight: 48,\n            headerHeight: 48,\n            tableData: [],\n            setPagination: {}, // 真实的分页对象\n            multipleSelection: [],\n            tempTotalData: {}, //临时模拟数据用\n            changeTableSize:{ //设置table字体大小\n                '大':'list-table-big',\n                '中':'list-table',\n                '小':'list-table-small',\n            },\n            applyTableColWidths:[],//接收改变后的列\n            tableWidth:null,\n            isShowDefault:false,\n            tableHeight:null,\n            maxTbHeight:null,\n            parentDivWidth:null\n        }\n    },\n    // computed: {\n        // tableHeight() {\n        //     return this.displayRows * this.rowHeight + this.headerHeight + 1\n        // }\n    // },\n    created() {\n        if (!this.pagination && this.pagination == '') { //list页面只传过来pagination\n            this.setPagination = {\n                total: 3,\n                currentPage: 1,\n                pageSize: 10,\n                position: 'right',\n                pageSizes: [10, 30, 50, 100, 200],\n                layout: 'sizes,total, prev, pager, next'\n            }\n        } else if (typeof this.pagination !='undefined' && this.pagination != '') { //list页面传过来:pagination=pagination\n            this.setPagination = this.pagination\n        } else { // 不分页\n            this.setPagination = {}\n        }\n        if ((this.getDataWay.dataType).toLowerCase() == 'url') { // 根据url发送请求获取table数据\n            this.getDataWay.firstRequest===undefined  && this.loadData()//请求数据\n        } else { // 通过list页面直接传table数据\n            if (this.getDataWay.data.length > 0 && this.pagination !== undefined) {\n                this.setPagination.total = this.getDataWay.data.length\n            }\n            this.tableData = this.getDataWay.data || []\n        }\n\n        //表格是否有默认排序\n        if(!!this.defaultSort){\n            this.isShowDefault=true\n        }\n    },\n    beforeMount(){\n        /**\n         * 接收父页面合并行或列的方法\n         * @param row, column, rowIndex, columnIndex\n         */\n        this.getSpanMethodFun=this.spanMethod\n        this.tableRowClassName=this.rowClassName\n    },\n    mounted() {\n        this.setTableHeight() //设置表格高度\n        // if(this.tableScale){ // 表格整体宽度=页面宽度*表格显示百分比率\n        //     // this.setTableWidth()\n        //     this.reduceCall(this.setTableWidth(), 1000)\n        // }\n        if(this.caption && !!this.$refs.ListTable){ //添加表格标题\n            $(this.$refs.ListTable.$el.querySelector('table')).prepend(`<caption>${this.caption}</caption>`)\n        }\n        this.computedColumn() //获取列宽\n        this.tableWidth=$('.table-outer').width()*this.tableScale/100\n        this.selectData()\n\n        var _this=this\n        var erd = elementResizeDetectorMaker()\n        erd.listenTo($(\".cp_worktab_content\").children(), function (element) { //监听外层是否出现滚动条，如果出现滚动条重新调用设置表格宽度方法\n            _this.reduceCall(_this.setTableWidth(), 1000)\n        })\n\n    },\n    updated() {\n        // if (this.$refs.ListTable.$refs.headerWrapper) {\n        //     this.headerHeight = this.$refs.ListTable.$refs.headerWrapper.clientHeight\n        // }\n    },\n    watch: {\n        // 'pagination.pageSize'(newValue, oldValue) {\n        //     if (typeof this.pagination && this.pagination != '') { //pageSize改变重新渲染页面\n        //         this.setPagination = this.pagination\n        //         //this.loadData();\n        //     }\n        // },\n        'tableScale'(newValue, oldValue) {\n            if(this.tableScale){\n                this.tableWidth=$('.table-outer').width()*this.tableScale/100\n                $(\".list_table\").css({'width':this.tableWidth+'px','max-width':this.tableWidth+'px'})\n            }\n        },\n        'caption'(newValue, oldValue) {\n            if(this.caption){ //添加表格标题\n                if($(this.$refs.ListTable.$el.querySelector('table')).find('caption').length>0){\n                    $(this.$refs.ListTable.$el.querySelector('table')).find('caption').remove()\n                }\n                $(this.$refs.ListTable.$el.querySelector('table')).prepend(`<caption>${newValue}</caption>`)\n            }\n        },\n        'columns'(newValue, oldValue) {//列变化\n            this.computedColumn() //获取列宽\n        },\n        '$store.state.screenHeight'(newValue, oldValue) {\n            this.setTableHeight()\n        },\n        '$store.state.screenWidth'(newValue, oldValue) {\n            this.setTableWidth()\n        },\n        '$store.state.leftFold'(newValue, oldValue) { //监听左侧tree_toggle\n            var _this=this\n            setTimeout(function () {\n                _this.setTableWidth()\n            },300)\n        },\n        // '$store.state.contentHeight'(newValue, oldValue) { //监听内容高度\n        //     let H=this.$el.getElementsByClassName('table-outer')[0].clientHeight //表格实际高度\n        //     if(newValue<H) //判断.cp_worktab_content是否出现滚动条,如果出现滚动条重新计算\n        //     {\n        //         this.setTableWidth()\n        //     }\n        // }\n\n    },\n    methods: {\n        loadData: function (searchParams) { // 获取列表数据\n            // this.loading= this.needLoading\n            this.loading= this.needLoading||this.$$util.needLoading||false\n            let _this = this\n            let dataParams = {}\n            if (searchParams) {\n                dataParams = Object.assign(_this.getDataWay.param, searchParams) // 获取请求参数数据\n                _this.setPagination.currentPage=1\n            } else {\n                dataParams = _this.getDataWay.param||{}\n            }\n            if(_this.getDataWay.dataType==='data'){ //直接展示数据\n                _this.tableData = _this.getDataWay.data\n                return false\n            }\n            if( !!_this.getDataWay.type && _this.getDataWay.type==\"get\"){\n                let pageParam = {}\n                pageParam.currentPage = _this.setPagination.currentPage\n                pageParam.pageSize = _this.setPagination.pageSize\n                this.$axios.get(_this.getDataWay.data, {params: Object.assign(dataParams, pageParam)})\n                    .then(function (data) {\n                        if (data && data.result) {\n                            if (typeof (_this.$parent.formatterData) === \"function\") {\n                                _this.$emit('formatterData', data.info.list); //暴露方法\n                            }\n                            _this.tableData = data.info.list\n\n                            if (typeof _this.setPagination && _this.setPagination != '') {\n                                _this.$set(_this.setPagination,\"total\",data.info.total||data.info.list.length)\n                                //_this.setPagination.total = res.total || data.info.list.length\n                            }\n                        }\n                        _this.loading=false\n                    }).then(()=>{\n                    _this.selectData()\n                })\n            }else {\n                this.$axios({\n                    method: 'post',\n                    url: _this.getDataWay.data,\n                    data: Object.assign(dataParams, _this.setPagination)\n                }).then(function (data) {\n                    if (data && data.result) {\n                        //拆分数据\n                        if (_this.$parent.spiltTableData && typeof (_this.$parent.spiltTableData) === \"function\") {\n                            _this.tableData = _this.$parent.spiltTableData(data.info)\n                        } else {\n                            if(!!data.info){\n                            _this.tableData = data.info.list\n                            }\n                        }\n                        //格式化数据\n                        if(_this.dialogTable){ //弹出层嵌套表格\n                            if (_this.$parent.$parent.$parent.$parent.formatterData && typeof _this.$parent.$parent.$parent.$parent.formatterData === \"function\") {\n                                _this.$parent.$parent.$parent.$parent.formatterData(_this.tableData);\n                            }\n                        }else{ //正常表格\n                            if (_this.$parent.formatterData && typeof (_this.$parent.formatterData) === \"function\") {\n                                _this.$parent.formatterData(_this.tableData);\n                            }\n                        }\n\n                        if (typeof _this.setPagination && _this.setPagination != '') {\n                            _this.$set(_this.setPagination,\"total\",data.info.total||data.info.list.length)\n                            //_this.setPagination.total = data.info.total||data.info.list.length\n                        }\n                        _this.loading=false\n                    } else {\n                        //console.info(data.msg)\n                    }\n                }).then(()=>{\n                    _this.selectData()\n                }).catch(function (error) {\n                    //window.console.log(error);\n                });\n            }\n\n        },\n        select(selection, row) {\n            if (selection.indexOf(row) >= 0) {\n                if (this.checkedData.indexOf(row) == -1) {\n                    this.checkedData.push(row)\n                }\n            } else {\n                this.checkedData.forEach((item,index) => {\n                    if(JSON.stringify(item) == JSON.stringify(row)){\n                        this.checkedData.splice(index,1)\n                    }\n                })\n            }\n        },\n        selectAll(selection) {\n            let _this=this\n            if (selection.length > 0) {\n                selection.forEach(item => {\n                    if (_this.checkedData.indexOf(item) == -1) {\n                        _this.checkedData.push(item)\n                    }\n                })\n            } else {\n                _this.tableData.forEach(row =>{\n                    if (JSON.stringify(_this.checkedData).indexOf(JSON.stringify(row)) >=0) {\n                        _this.checkedData.splice(row,1)\n                    }\n                })\n            }\n        },\n        //选中用户默认要选中的数据\n        selectData:function(){\n            let _this = this\n            let temp = []\n            this.checkedData.forEach(item1 => {\n                _this.tableData.forEach(item2 => {\n                    if(JSON.stringify(item1) == JSON.stringify(item2)){\n                        temp.push(item2)\n                    }\n                })\n            })\n\n            temp.forEach(row => {\n                _this.$refs.ListTable.toggleRowSelection(row)\n            });\n        },\n        computedColumn:function(){\n            let screenWidth= $('.table-outer').width()\n            let isComputed = true //根据isComputed判断表格列是否需要重新计算，默认是重新计算\n            this.columns && this.columns.forEach(item=>{\n                if(!!item.width){ //对应列有宽度设置时，需要把列的宽度转换为px\n                    if((/^\\d.+%$/).test(item.width)){// 对应列宽度设置为百分比\n                        //item.width= parseFloat(item.width)*screenWidth/100.0\n                        item.columnWidth = parseFloat(item.width)*screenWidth/100.0\n                    }else{ //对应列宽度设置为px\n                        item.columnWidth = item.width\n                    }\n                }else{\n                    isComputed = false; // 存在没有给定宽度的列，所以不需要重新计算\n                }\n            })\n            if(isComputed && this.columns){ // 处理所有给定列宽度不足百分百的情况，给每列平分宽度\n                let total = 0\n                this.columns.forEach(item=>{\n                    total += item.columnWidth\n                })\n                if(typeof this.selection && this.selection){//如果有复选框，减去复选框的宽度\n                    total+=55\n                }\n                if(typeof this.index && this.index){//如果有序号哦，减去序号的宽度\n                    total+=60\n                }\n                if(total<screenWidth){\n                    let addw =(screenWidth-total)*1.0/this.columns.length\n                    this.columns.forEach(item=>{\n                        item.columnWidth+=Math.floor(addw) //避免出现滚动条，浮点数向下取整\n                    })\n                }\n            }\n            // console.log(this.columns,'所有列宽度转换后！！！')\n        },\n        selectionChange: function (val) {\n            this.multipleSelection = val;\n            this.$emit('handleSelectionChange', val); //当前页返回数据\n            this.$emit('update:getCheckedData', this.checkedData); //直接抛出选中数据\n        },\n        getCheckedData: function () { //抛出选中数据\n            return this.checkedData;\n        },\n        getCurPageCheckedData: function () { //抛出当前页选中数据\n            return this.multipleSelection;\n        },\n        handleCurrentChange: function (val) {\n            this.setPagination.currentPage = val\n            if((this.getDataWay.dataType).toLowerCase()=='url'){ //正式环境放开，发送请求分页\n                this.loadData();\n            }else {\n                //对数据进行分页\n                let tableData = this.getDataWay.data\n                //let tableData = this.tempTotalData\n                let currentPage = this.setPagination.currentPage\n                let pageSize = this.setPagination.pageSize\n                this.tableData = tableData.slice((currentPage - 1) * pageSize, currentPage * pageSize)\n            }\n            this.$emit('currentChange', val);\n        },\n        handleSizeChange: function (val) {\n            this.setPagination.pageSize = val\n            this.loadData()\n            this.$emit('sizeChange', val);\n        },\n        currentRowChange: function (row) {\n            this.$emit('currentRowChange', row);\n        },\n        /**\n         * table 排序事件\n         * @param column prop order\n         */\n        sortChange: function (column, prop, order) {\n            // this.$emit(\"sortChange\", column);\n            var _this=this\n            let search={}\n            _this.$parent.$children.forEach(item => {\n                if (item.$refs.hasOwnProperty('searchForm')) {\n                    let search=item.searchParams // 获取搜索条件\n                }\n            })\n            search.prop=column.prop||prop\n            search.order=column.order||order\n            let pageParam = {}\n            pageParam.currentPage = _this.setPagination.currentPage\n            pageParam.pageSize = _this.setPagination.pageSize\n            let dataParams = Object.assign(pageParam, search) // 获取请求参数数据\n            _this.loadData(dataParams)\n        },\n        /**\n         * 当某一行被点击时会触发该事件\n         * @param row, event, column\n         */\n        rowClick: function (row, event, column) {\n            let _this = this\n            if(this.selection && this.rowCheckboxClick){ //存在复选框,行选中切换复选框选中取消\n                if(column.currentTarget.getElementsByClassName(\"el-checkbox__input\")[0].className.indexOf('is-checked')<0){\n                    _this.multipleSelection.push(row);\n                }else {\n                    _this.multipleSelection.forEach((item,index) => {\n                        if(JSON.stringify(item) == JSON.stringify(row)){\n                            this.multipleSelection.splice(index,1)\n                        }\n                    })\n                }\n                let arr = JSON.parse(JSON.stringify(this.multipleSelection))\n                this.$refs.ListTable.clearSelection()\n                let temp = []\n                arr.forEach(item1 => {\n                    _this.tableData.forEach(item2 => {\n                        if(JSON.stringify(item1) == JSON.stringify(item2)){\n                            temp.push(item2)\n                        }\n                    })\n                })\n                temp.forEach(row => {\n                    _this.$refs.ListTable.toggleRowSelection(row)\n                });\n                //this.$refs.ListTable.toggleRowSelection(temp,true);\n                if (this.checkedData.indexOf(row) == -1) {\n                    this.checkedData.push(row)\n                } else {\n                    this.checkedData.forEach((item,index) => {\n                        if(JSON.stringify(item) == JSON.stringify(row)){\n                            this.checkedData.splice(index,1)\n                        }\n                    })\n                }\n            }\n            this.$emit(\"rowClick\", row, event, column);\n        },\n        dbRowClick:function (row, event, column) {\n            this.$emit(\"dbRowClick\", row, event, column);\n        },\n        rowContextmenu:function (row, event, column) {\n            this.$emit(\"dbRowClick\", row, event, column);\n        },\n        cellClick: function (row, column, cell, event) {\n            this.$emit(\"cellClick\", row, event, column);\n        },\n        dbCellClick:function(row, column, cell, event) {\n            this.$emit(\"dbCellClick\", row, event, column);\n        },\n        /**\n         * 当拖动表头改变了列的宽度的时候会触发该事件\n         * @param newWidth, oldWidth, column, event\n         */\n        headerDragend:function(newWidth, oldWidth, column, event){\n            var _this= this\n            // let screenWidth= this.$el.clientWidth\n            let screenWidth= $('.table-outer').width()\n            setTimeout(() => {\n                _this.applyTableColWidths = []\n                let applyTable = _this.$refs.ListTable\n                let applyTableCol =applyTable.columns\n                for (let i = 0; i < applyTableCol.length; i++) {\n                    //&&applyTableCol[i].type!=\"selection\"&&applyTableCol[i].type!=\"index\"\n                    _this.columns.forEach(item=>{\n                        if(item.label==applyTableCol[i].label){\n                            if(!!applyTableCol[i].width) {\n                                item.width = (applyTableCol[i].width / _this.tableWidth * 100).toFixed(2) + '%'\n                            }\n                            _this.applyTableColWidths.push(item)\n                        }\n                    })\n                }\n                _this.$emit('columnChange', _this.applyTableColWidths);\n                _this.computedColumn() //获取列宽\n                // console.log(_this.applyTableColWidths)\n            }, 100)\n        },\n        /**\n         * 表格高度控制\n         */\n        setTableHeight: function () {\n            // this.$el.parentNode.parentElement.style.height\n            if(!!this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.parentElement.style.height){\n                let height=parseInt(this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.parentElement.style.height)\n                if(typeof this.pagination){ // 分页存在 表格高度=指定高度-分页高度\n                    this.maxTbHeight = height-62\n                }else { // 分页不存在\n                    this.maxTbHeight = height\n                }\n                // $(\".list_table\").css({'height':this.maxTbHeight+'px'})\n                this.$el.getElementsByClassName('list_table')[0].style.height=this.maxTbHeight+'px'\n            }\n        },\n        /**\n         * 表格宽度控制\n         */\n        setTableWidth: function () {\n            let width=null\n            if(!!this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.parentElement.style.width){\n                width=this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.parentElement.style.width\n            }else{\n                width=this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.clientWidth*this.tableScale/100\n            }\n            if(this.$el.getElementsByClassName('list_table')[0]){\n                this.$el.getElementsByClassName('list_table')[0].style.width=width+'px'\n                this.$el.getElementsByClassName('list_table')[0].style.maxWidth=width+'px'\n            }\n        },\n        // 防止连续调用\n        reduceCall:function(fn, wait) {\n            let timeout = null;\n            return function() {\n                if(timeout !== null){\n                    clearTimeout(timeout)\n                }\n                timeout = setTimeout(fn, wait);\n            }\n        }\n\n    }\n}\n",{"version":3,"sources":["TableList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"TableList.vue","sourceRoot":"src/components/grid","sourcesContent":["/**\r\n*  table公共组件\r\n*  @params\r\n***\r\n*  :getDataWay 获取表格数据的方式，1.通过url方式2.通过数据数组方式3.请求方式type:\"post\"|\"get\",默认\"post\"\r\n*  :columns 表格列\r\n*  :caption 表名\r\n*  :tableScale 表格放大倍数\r\n*  :tableSize  表格字体大小\r\n*  :pagination  分页：pagination值为空默认分页 ；pagination不为空自定义分页；不传，默认不分页\r\n*  :needLoading 在表格加载数据时显示，默认不显示\r\n*  :spanMethod 合并行或列(方法)\r\n*  :rowClassName 行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。\tFunction({row, rowIndex})/String\r\n*  :getCheckedData.sync  选中的数据\r\n*  getCurPageCheckedData  抛出当前页数据\r\n*  :tableColumnEmpty 列为空时显示的提示语，默认为'暂无数据'\r\n*  showOverflowTooltip  当内容过长被隐藏时显示 tooltip,默认false--列的属性\r\n*  tableData 表格数据\r\n*  selection 对应列的类型。如果设置了 selection 则显示多选框；如果设置了 index 则显示该行的索引\r\n*  border 表格边框\r\n*  @rowClick  当某一行被点击时会触发该事件\r\n*  @dbRowClick  当某一行被双击时会触发该事件\r\n*  @rowContextmenu\t当某一行被鼠标右键点击时会触发该事件\r\n*  @cellClick 当某个单元格被点击时会触发该事件\r\n*  @dbCellClick\t当某个单元格被双击击时会触发该事件\r\n*  @currentRowChange  当表格的当前行发生变化的时候会触发该事件\r\n*  @handleSelectionChange  当选择项发生变化时会触发该事件\r\n*  @headerDragend  当拖动表头改变了列的宽度的时候会触发该事件\r\n*  @sortChange\t当表格的排序条件发生变化的时候会触发该事件\r\n*  @columnChange  列宽改变\r\n*  this.$refs.table.setTableHeight(300)  手动设置表格高度\r\n*/\r\n<template>\r\n    <el-row>\r\n        <el-col :span=\"24\" :class=\"changeTableSize[tableSize]\" >\r\n            <div class=\"table-outer\">\r\n                <p v-if=\"columns.length==0\" class=\"txt-center\">{{tableColumnEmpty}}</p>\r\n                <el-table\r\n                    v-if=\"columns.length>0\"\r\n                    ref=\"ListTable\"\r\n                    v-loading=\"loading\"\r\n                    element-loading-text=\"拼命加载中\"\r\n                    :data=\"tableData\"\r\n                    @sort-change=\"sortChange\"\r\n                    @select = \"select\"\r\n                    @select-all=\"selectAll\"\r\n                    @row-click=\"rowClick\"\r\n                    @row-dblclick=\"dbRowClick\"\r\n                    @row-contextmenu=\"rowContextmenu\"\r\n                    @cell-click=\"cellClick\"\r\n                    @cell-dblclick=\"dbCellClick\"\r\n                    @header-dragend=\"headerDragend\"\r\n                    :span-method=\"getSpanMethodFun\"\r\n\r\n                    :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\"\r\n                    default-expand-all\r\n                    border\r\n                    class=\"list_table\"\r\n                    :stripe=\"stripe\"\r\n                    :highlight-current-row=\"highlightCurrentRow\"\r\n                    @current-change=\"currentRowChange\"\r\n                    @selection-change=\"selectionChange\"\r\n                    :default-sort=\"defaultSort\"\r\n                    :row-class-name=\"tableRowClassName\">\r\n                    <!--row-key=\"id\"-->\r\n                    <!--有row-key不能半选-->\r\n                    <!--checkbox框-->\r\n                    <template v-if=\"typeof selection && selection\">\r\n                        <el-table-column\r\n                                type=\"selection\"\r\n                                width=\"55\">\r\n                        </el-table-column>\r\n                    </template>\r\n                    <!-- 序号-->\r\n                    <template v-if=\"typeof index && index\">\r\n                        <el-table-column\r\n                                type=\"index\"\r\n                                label=\"序号\"\r\n                                width=\"60\">\r\n                        </el-table-column>\r\n                    </template>\r\n                    <template v-for=\"(column, index) in columns\">\r\n                        <el-table-column v-if=\"!column.template\"\r\n                                        :key=\"`col_${index}`\"\r\n                                        :prop=\"column.prop\"\r\n                                        :label=\"column.label\"\r\n                                        :width=\"column.columnWidth\"\r\n                                        :sortable=\"column.sortable\"\r\n                                        :sort-change=\"{'sortChange':column.sortable}\"\r\n                                        :show-overflow-tooltip=\"true\"\r\n                                        :formatter=column.formatter>\r\n                        </el-table-column>\r\n                        <slot :name=\"column.prop\" v-if=\"!!column.template\"></slot>\r\n                    </template>\r\n                </el-table>\r\n            </div>\r\n        </el-col>\r\n        <el-col class=\"table-bottom-page\" :span=\"24\" v-if=\"pagination && pagination.total>0 && columns.length>0\"\r\n                :style=\"{textAlign: setPagination.position}\">\r\n            <tablePage :pagination=\"setPagination\" v-on:currentChange=\"handleCurrentChange\"\r\n                       v-on:sizeChange=\"handleSizeChange\"></tablePage>\r\n        </el-col>\r\n    </el-row>\r\n</template>\r\n\r\n<script>\r\n    import tablePage from './TablePage.vue'\r\n    var elementResizeDetectorMaker = require(\"element-resize-detector\")\r\n    export default {\r\n        name: \"TableList\",\r\n        components: {\r\n            tablePage,\r\n        },\r\n        props: {\r\n            tableColumnEmpty:{\r\n                default: '暂无数据',\r\n                type: String\r\n            },\r\n            checkedData:{\r\n                type:Array,\r\n                default :function () {\r\n                    return []\r\n                }\r\n            },\r\n            needLoading:{\r\n                // default: false,\r\n                type: Boolean\r\n            },\r\n            rowCheckboxClick:{\r\n                default: true,\r\n                type: Boolean\r\n            },\r\n            caption:{\r\n                type:String\r\n            },\r\n            tableScale:{\r\n                default: 100,\r\n                type: Number\r\n            },\r\n            displayRows: {\r\n                default: 10,\r\n                type: Number\r\n            },\r\n            dialogTable: {\r\n                default: false,\r\n                type: Boolean\r\n            },\r\n            selection: { //控制复选框，默认不显示复选框\r\n                default: false,\r\n                type: Boolean\r\n            },\r\n            index: { //\r\n                default: false,\r\n                type: Boolean\r\n            },\r\n            getDataWay: Object,//获取table数据的方式\r\n            highlightCurrentRow: Boolean,//高亮显示选中的行\r\n            columns: Array, //获取table的列\r\n            pagination: {},\r\n            defaultSort: Object,\r\n            // height: Number,\r\n            stripe: {\r\n                default: true,\r\n                type: Boolean\r\n            },\r\n            tableSize:{\r\n                default:'中',\r\n                type: String\r\n            },\r\n            spanMethod:{\r\n                default:function () {\r\n\r\n                },\r\n                type: Function\r\n            },\r\n            rowClassName:{\r\n                default:function () {\r\n\r\n                },\r\n                type: Function\r\n            }\r\n        },\r\n        data: function () {\r\n            return {\r\n                loading: false,\r\n                border: false,\r\n                dropCol: this.columns,\r\n                rowHeight: 48,\r\n                headerHeight: 48,\r\n                tableData: [],\r\n                setPagination: {}, // 真实的分页对象\r\n                multipleSelection: [],\r\n                tempTotalData: {}, //临时模拟数据用\r\n                changeTableSize:{ //设置table字体大小\r\n                    '大':'list-table-big',\r\n                    '中':'list-table',\r\n                    '小':'list-table-small',\r\n                },\r\n                applyTableColWidths:[],//接收改变后的列\r\n                tableWidth:null,\r\n                isShowDefault:false,\r\n                tableHeight:null,\r\n                maxTbHeight:null,\r\n                parentDivWidth:null\r\n            }\r\n        },\r\n        // computed: {\r\n            // tableHeight() {\r\n            //     return this.displayRows * this.rowHeight + this.headerHeight + 1\r\n            // }\r\n        // },\r\n        created() {\r\n            if (!this.pagination && this.pagination == '') { //list页面只传过来pagination\r\n                this.setPagination = {\r\n                    total: 3,\r\n                    currentPage: 1,\r\n                    pageSize: 10,\r\n                    position: 'right',\r\n                    pageSizes: [10, 30, 50, 100, 200],\r\n                    layout: 'sizes,total, prev, pager, next'\r\n                }\r\n            } else if (typeof this.pagination !='undefined' && this.pagination != '') { //list页面传过来:pagination=pagination\r\n                this.setPagination = this.pagination\r\n            } else { // 不分页\r\n                this.setPagination = {}\r\n            }\r\n            if ((this.getDataWay.dataType).toLowerCase() == 'url') { // 根据url发送请求获取table数据\r\n                this.getDataWay.firstRequest===undefined  && this.loadData()//请求数据\r\n            } else { // 通过list页面直接传table数据\r\n                if (this.getDataWay.data.length > 0 && this.pagination !== undefined) {\r\n                    this.setPagination.total = this.getDataWay.data.length\r\n                }\r\n                this.tableData = this.getDataWay.data || []\r\n            }\r\n\r\n            //表格是否有默认排序\r\n            if(!!this.defaultSort){\r\n                this.isShowDefault=true\r\n            }\r\n        },\r\n        beforeMount(){\r\n            /**\r\n             * 接收父页面合并行或列的方法\r\n             * @param row, column, rowIndex, columnIndex\r\n             */\r\n            this.getSpanMethodFun=this.spanMethod\r\n            this.tableRowClassName=this.rowClassName\r\n        },\r\n        mounted() {\r\n            this.setTableHeight() //设置表格高度\r\n            // if(this.tableScale){ // 表格整体宽度=页面宽度*表格显示百分比率\r\n            //     // this.setTableWidth()\r\n            //     this.reduceCall(this.setTableWidth(), 1000)\r\n            // }\r\n            if(this.caption && !!this.$refs.ListTable){ //添加表格标题\r\n                $(this.$refs.ListTable.$el.querySelector('table')).prepend(`<caption>${this.caption}</caption>`)\r\n            }\r\n            this.computedColumn() //获取列宽\r\n            this.tableWidth=$('.table-outer').width()*this.tableScale/100\r\n            this.selectData()\r\n\r\n            var _this=this\r\n            var erd = elementResizeDetectorMaker()\r\n            erd.listenTo($(\".cp_worktab_content\").children(), function (element) { //监听外层是否出现滚动条，如果出现滚动条重新调用设置表格宽度方法\r\n                _this.reduceCall(_this.setTableWidth(), 1000)\r\n            })\r\n\r\n        },\r\n        updated() {\r\n            // if (this.$refs.ListTable.$refs.headerWrapper) {\r\n            //     this.headerHeight = this.$refs.ListTable.$refs.headerWrapper.clientHeight\r\n            // }\r\n        },\r\n        watch: {\r\n            // 'pagination.pageSize'(newValue, oldValue) {\r\n            //     if (typeof this.pagination && this.pagination != '') { //pageSize改变重新渲染页面\r\n            //         this.setPagination = this.pagination\r\n            //         //this.loadData();\r\n            //     }\r\n            // },\r\n            'tableScale'(newValue, oldValue) {\r\n                if(this.tableScale){\r\n                    this.tableWidth=$('.table-outer').width()*this.tableScale/100\r\n                    $(\".list_table\").css({'width':this.tableWidth+'px','max-width':this.tableWidth+'px'})\r\n                }\r\n            },\r\n            'caption'(newValue, oldValue) {\r\n                if(this.caption){ //添加表格标题\r\n                    if($(this.$refs.ListTable.$el.querySelector('table')).find('caption').length>0){\r\n                        $(this.$refs.ListTable.$el.querySelector('table')).find('caption').remove()\r\n                    }\r\n                    $(this.$refs.ListTable.$el.querySelector('table')).prepend(`<caption>${newValue}</caption>`)\r\n                }\r\n            },\r\n            'columns'(newValue, oldValue) {//列变化\r\n                this.computedColumn() //获取列宽\r\n            },\r\n            '$store.state.screenHeight'(newValue, oldValue) {\r\n                this.setTableHeight()\r\n            },\r\n            '$store.state.screenWidth'(newValue, oldValue) {\r\n                this.setTableWidth()\r\n            },\r\n            '$store.state.leftFold'(newValue, oldValue) { //监听左侧tree_toggle\r\n                var _this=this\r\n                setTimeout(function () {\r\n                    _this.setTableWidth()\r\n                },300)\r\n            },\r\n            // '$store.state.contentHeight'(newValue, oldValue) { //监听内容高度\r\n            //     let H=this.$el.getElementsByClassName('table-outer')[0].clientHeight //表格实际高度\r\n            //     if(newValue<H) //判断.cp_worktab_content是否出现滚动条,如果出现滚动条重新计算\r\n            //     {\r\n            //         this.setTableWidth()\r\n            //     }\r\n            // }\r\n\r\n        },\r\n        methods: {\r\n            loadData: function (searchParams) { // 获取列表数据\r\n                // this.loading= this.needLoading\r\n                this.loading= this.needLoading||this.$$util.needLoading||false\r\n                let _this = this\r\n                let dataParams = {}\r\n                if (searchParams) {\r\n                    dataParams = Object.assign(_this.getDataWay.param, searchParams) // 获取请求参数数据\r\n                    _this.setPagination.currentPage=1\r\n                } else {\r\n                    dataParams = _this.getDataWay.param||{}\r\n                }\r\n                if(_this.getDataWay.dataType==='data'){ //直接展示数据\r\n                    _this.tableData = _this.getDataWay.data\r\n                    return false\r\n                }\r\n                if( !!_this.getDataWay.type && _this.getDataWay.type==\"get\"){\r\n                    let pageParam = {}\r\n                    pageParam.currentPage = _this.setPagination.currentPage\r\n                    pageParam.pageSize = _this.setPagination.pageSize\r\n                    this.$axios.get(_this.getDataWay.data, {params: Object.assign(dataParams, pageParam)})\r\n                        .then(function (data) {\r\n                            if (data && data.result) {\r\n                                if (typeof (_this.$parent.formatterData) === \"function\") {\r\n                                    _this.$emit('formatterData', data.info.list); //暴露方法\r\n                                }\r\n                                _this.tableData = data.info.list\r\n\r\n                                if (typeof _this.setPagination && _this.setPagination != '') {\r\n                                    _this.$set(_this.setPagination,\"total\",data.info.total||data.info.list.length)\r\n                                    //_this.setPagination.total = res.total || data.info.list.length\r\n                                }\r\n                            }\r\n                            _this.loading=false\r\n                        }).then(()=>{\r\n                        _this.selectData()\r\n                    })\r\n                }else {\r\n                    this.$axios({\r\n                        method: 'post',\r\n                        url: _this.getDataWay.data,\r\n                        data: Object.assign(dataParams, _this.setPagination)\r\n                    }).then(function (data) {\r\n                        if (data && data.result) {\r\n                            //拆分数据\r\n                            if (_this.$parent.spiltTableData && typeof (_this.$parent.spiltTableData) === \"function\") {\r\n                                _this.tableData = _this.$parent.spiltTableData(data.info)\r\n                            } else {\r\n                                if(!!data.info){\r\n                                _this.tableData = data.info.list\r\n                                }\r\n                            }\r\n                            //格式化数据\r\n                            if(_this.dialogTable){ //弹出层嵌套表格\r\n                                if (_this.$parent.$parent.$parent.$parent.formatterData && typeof _this.$parent.$parent.$parent.$parent.formatterData === \"function\") {\r\n                                    _this.$parent.$parent.$parent.$parent.formatterData(_this.tableData);\r\n                                }\r\n                            }else{ //正常表格\r\n                                if (_this.$parent.formatterData && typeof (_this.$parent.formatterData) === \"function\") {\r\n                                    _this.$parent.formatterData(_this.tableData);\r\n                                }\r\n                            }\r\n\r\n                            if (typeof _this.setPagination && _this.setPagination != '') {\r\n                                _this.$set(_this.setPagination,\"total\",data.info.total||data.info.list.length)\r\n                                //_this.setPagination.total = data.info.total||data.info.list.length\r\n                            }\r\n                            _this.loading=false\r\n                        } else {\r\n                            //console.info(data.msg)\r\n                        }\r\n                    }).then(()=>{\r\n                        _this.selectData()\r\n                    }).catch(function (error) {\r\n                        //window.console.log(error);\r\n                    });\r\n                }\r\n\r\n            },\r\n            select(selection, row) {\r\n                if (selection.indexOf(row) >= 0) {\r\n                    if (this.checkedData.indexOf(row) == -1) {\r\n                        this.checkedData.push(row)\r\n                    }\r\n                } else {\r\n                    this.checkedData.forEach((item,index) => {\r\n                        if(JSON.stringify(item) == JSON.stringify(row)){\r\n                            this.checkedData.splice(index,1)\r\n                        }\r\n                    })\r\n                }\r\n            },\r\n            selectAll(selection) {\r\n                let _this=this\r\n                if (selection.length > 0) {\r\n                    selection.forEach(item => {\r\n                        if (_this.checkedData.indexOf(item) == -1) {\r\n                            _this.checkedData.push(item)\r\n                        }\r\n                    })\r\n                } else {\r\n                    _this.tableData.forEach(row =>{\r\n                        if (JSON.stringify(_this.checkedData).indexOf(JSON.stringify(row)) >=0) {\r\n                            _this.checkedData.splice(row,1)\r\n                        }\r\n                    })\r\n                }\r\n            },\r\n            //选中用户默认要选中的数据\r\n            selectData:function(){\r\n                let _this = this\r\n                let temp = []\r\n                this.checkedData.forEach(item1 => {\r\n                    _this.tableData.forEach(item2 => {\r\n                        if(JSON.stringify(item1) == JSON.stringify(item2)){\r\n                            temp.push(item2)\r\n                        }\r\n                    })\r\n                })\r\n\r\n                temp.forEach(row => {\r\n                    _this.$refs.ListTable.toggleRowSelection(row)\r\n                });\r\n            },\r\n            computedColumn:function(){\r\n                let screenWidth= $('.table-outer').width()\r\n                let isComputed = true //根据isComputed判断表格列是否需要重新计算，默认是重新计算\r\n                this.columns && this.columns.forEach(item=>{\r\n                    if(!!item.width){ //对应列有宽度设置时，需要把列的宽度转换为px\r\n                        if((/^\\d.+%$/).test(item.width)){// 对应列宽度设置为百分比\r\n                            //item.width= parseFloat(item.width)*screenWidth/100.0\r\n                            item.columnWidth = parseFloat(item.width)*screenWidth/100.0\r\n                        }else{ //对应列宽度设置为px\r\n                            item.columnWidth = item.width\r\n                        }\r\n                    }else{\r\n                        isComputed = false; // 存在没有给定宽度的列，所以不需要重新计算\r\n                    }\r\n                })\r\n                if(isComputed && this.columns){ // 处理所有给定列宽度不足百分百的情况，给每列平分宽度\r\n                    let total = 0\r\n                    this.columns.forEach(item=>{\r\n                        total += item.columnWidth\r\n                    })\r\n                    if(typeof this.selection && this.selection){//如果有复选框，减去复选框的宽度\r\n                        total+=55\r\n                    }\r\n                    if(typeof this.index && this.index){//如果有序号哦，减去序号的宽度\r\n                        total+=60\r\n                    }\r\n                    if(total<screenWidth){\r\n                        let addw =(screenWidth-total)*1.0/this.columns.length\r\n                        this.columns.forEach(item=>{\r\n                            item.columnWidth+=Math.floor(addw) //避免出现滚动条，浮点数向下取整\r\n                        })\r\n                    }\r\n                }\r\n                // console.log(this.columns,'所有列宽度转换后！！！')\r\n            },\r\n            selectionChange: function (val) {\r\n                this.multipleSelection = val;\r\n                this.$emit('handleSelectionChange', val); //当前页返回数据\r\n                this.$emit('update:getCheckedData', this.checkedData); //直接抛出选中数据\r\n            },\r\n            getCheckedData: function () { //抛出选中数据\r\n                return this.checkedData;\r\n            },\r\n            getCurPageCheckedData: function () { //抛出当前页选中数据\r\n                return this.multipleSelection;\r\n            },\r\n            handleCurrentChange: function (val) {\r\n                this.setPagination.currentPage = val\r\n                if((this.getDataWay.dataType).toLowerCase()=='url'){ //正式环境放开，发送请求分页\r\n                    this.loadData();\r\n                }else {\r\n                    //对数据进行分页\r\n                    let tableData = this.getDataWay.data\r\n                    //let tableData = this.tempTotalData\r\n                    let currentPage = this.setPagination.currentPage\r\n                    let pageSize = this.setPagination.pageSize\r\n                    this.tableData = tableData.slice((currentPage - 1) * pageSize, currentPage * pageSize)\r\n                }\r\n                this.$emit('currentChange', val);\r\n            },\r\n            handleSizeChange: function (val) {\r\n                this.setPagination.pageSize = val\r\n                this.loadData()\r\n                this.$emit('sizeChange', val);\r\n            },\r\n            currentRowChange: function (row) {\r\n                this.$emit('currentRowChange', row);\r\n            },\r\n            /**\r\n             * table 排序事件\r\n             * @param column prop order\r\n             */\r\n            sortChange: function (column, prop, order) {\r\n                // this.$emit(\"sortChange\", column);\r\n                var _this=this\r\n                let search={}\r\n                _this.$parent.$children.forEach(item => {\r\n                    if (item.$refs.hasOwnProperty('searchForm')) {\r\n                        let search=item.searchParams // 获取搜索条件\r\n                    }\r\n                })\r\n                search.prop=column.prop||prop\r\n                search.order=column.order||order\r\n                let pageParam = {}\r\n                pageParam.currentPage = _this.setPagination.currentPage\r\n                pageParam.pageSize = _this.setPagination.pageSize\r\n                let dataParams = Object.assign(pageParam, search) // 获取请求参数数据\r\n                _this.loadData(dataParams)\r\n            },\r\n            /**\r\n             * 当某一行被点击时会触发该事件\r\n             * @param row, event, column\r\n             */\r\n            rowClick: function (row, event, column) {\r\n                let _this = this\r\n                if(this.selection && this.rowCheckboxClick){ //存在复选框,行选中切换复选框选中取消\r\n                    if(column.currentTarget.getElementsByClassName(\"el-checkbox__input\")[0].className.indexOf('is-checked')<0){\r\n                        _this.multipleSelection.push(row);\r\n                    }else {\r\n                        _this.multipleSelection.forEach((item,index) => {\r\n                            if(JSON.stringify(item) == JSON.stringify(row)){\r\n                                this.multipleSelection.splice(index,1)\r\n                            }\r\n                        })\r\n                    }\r\n                    let arr = JSON.parse(JSON.stringify(this.multipleSelection))\r\n                    this.$refs.ListTable.clearSelection()\r\n                    let temp = []\r\n                    arr.forEach(item1 => {\r\n                        _this.tableData.forEach(item2 => {\r\n                            if(JSON.stringify(item1) == JSON.stringify(item2)){\r\n                                temp.push(item2)\r\n                            }\r\n                        })\r\n                    })\r\n                    temp.forEach(row => {\r\n                        _this.$refs.ListTable.toggleRowSelection(row)\r\n                    });\r\n                    //this.$refs.ListTable.toggleRowSelection(temp,true);\r\n                    if (this.checkedData.indexOf(row) == -1) {\r\n                        this.checkedData.push(row)\r\n                    } else {\r\n                        this.checkedData.forEach((item,index) => {\r\n                            if(JSON.stringify(item) == JSON.stringify(row)){\r\n                                this.checkedData.splice(index,1)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                this.$emit(\"rowClick\", row, event, column);\r\n            },\r\n            dbRowClick:function (row, event, column) {\r\n                this.$emit(\"dbRowClick\", row, event, column);\r\n            },\r\n            rowContextmenu:function (row, event, column) {\r\n                this.$emit(\"dbRowClick\", row, event, column);\r\n            },\r\n            cellClick: function (row, column, cell, event) {\r\n                this.$emit(\"cellClick\", row, event, column);\r\n            },\r\n            dbCellClick:function(row, column, cell, event) {\r\n                this.$emit(\"dbCellClick\", row, event, column);\r\n            },\r\n            /**\r\n             * 当拖动表头改变了列的宽度的时候会触发该事件\r\n             * @param newWidth, oldWidth, column, event\r\n             */\r\n            headerDragend:function(newWidth, oldWidth, column, event){\r\n                var _this= this\r\n                // let screenWidth= this.$el.clientWidth\r\n                let screenWidth= $('.table-outer').width()\r\n                setTimeout(() => {\r\n                    _this.applyTableColWidths = []\r\n                    let applyTable = _this.$refs.ListTable\r\n                    let applyTableCol =applyTable.columns\r\n                    for (let i = 0; i < applyTableCol.length; i++) {\r\n                        //&&applyTableCol[i].type!=\"selection\"&&applyTableCol[i].type!=\"index\"\r\n                        _this.columns.forEach(item=>{\r\n                            if(item.label==applyTableCol[i].label){\r\n                                if(!!applyTableCol[i].width) {\r\n                                    item.width = (applyTableCol[i].width / _this.tableWidth * 100).toFixed(2) + '%'\r\n                                }\r\n                                _this.applyTableColWidths.push(item)\r\n                            }\r\n                        })\r\n                    }\r\n                    _this.$emit('columnChange', _this.applyTableColWidths);\r\n                    _this.computedColumn() //获取列宽\r\n                    // console.log(_this.applyTableColWidths)\r\n                }, 100)\r\n            },\r\n            /**\r\n             * 表格高度控制\r\n             */\r\n            setTableHeight: function () {\r\n                // this.$el.parentNode.parentElement.style.height\r\n                if(!!this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.parentElement.style.height){\r\n                    let height=parseInt(this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.parentElement.style.height)\r\n                    if(typeof this.pagination){ // 分页存在 表格高度=指定高度-分页高度\r\n                        this.maxTbHeight = height-62\r\n                    }else { // 分页不存在\r\n                        this.maxTbHeight = height\r\n                    }\r\n                    // $(\".list_table\").css({'height':this.maxTbHeight+'px'})\r\n                    this.$el.getElementsByClassName('list_table')[0].style.height=this.maxTbHeight+'px'\r\n                }\r\n            },\r\n            /**\r\n             * 表格宽度控制\r\n             */\r\n            setTableWidth: function () {\r\n                let width=null\r\n                if(!!this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.parentElement.style.width){\r\n                    width=this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.parentElement.style.width\r\n                }else{\r\n                    width=this.$el.getElementsByClassName('table-outer')[0].parentElement.parentElement.clientWidth*this.tableScale/100\r\n                }\r\n                if(this.$el.getElementsByClassName('list_table')[0]){\r\n                    this.$el.getElementsByClassName('list_table')[0].style.width=width+'px'\r\n                    this.$el.getElementsByClassName('list_table')[0].style.maxWidth=width+'px'\r\n                }\r\n            },\r\n            // 防止连续调用\r\n            reduceCall:function(fn, wait) {\r\n                let timeout = null;\r\n                return function() {\r\n                    if(timeout !== null){\r\n                        clearTimeout(timeout)\r\n                    }\r\n                    timeout = setTimeout(fn, wait);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n.list-table .el-table{\r\n    font-size: 14px;\r\n}\r\n.list-table-big .el-table{\r\n    font-size: 18px;\r\n}\r\n.list-table-small .el-table{\r\n    font-size: 12px;\r\n}\r\n.table-outer{\r\n    overflow-x: auto;\r\n}\r\n.table-outer .el-table {\r\n    overflow: auto;\r\n}\r\n.table-outer .txt-center {\r\n    text-align: center;\r\n}\r\n</style>\r\n"]}]}