{"remainingRequest":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vueWorkspace\\cyfz\\src\\components\\orgTree\\orgTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vueWorkspace\\cyfz\\src\\components\\orgTree\\orgTree.vue","mtime":1571707003397},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n    name: \"deptTree\",\n    props: {\n        treeProps: {\n            type: Object,\n            default: () => {\n                return {\n                    label: \"label\"\n                }\n            }\n        },\n        nodeKey: {\n            type: String,\n            default: \"id\"\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        pctrl: {\n            type: String,\n            default: '/qxgl-center/Qxgl002OrgCtrl/queryOrgTreeBySjorgId'\n        }\n    },\n    data() {\n        return {\n            orgTree: [],\n            searchText: \"\",\n            CurrentNode: []\n        }\n    },\n    /*假数据第一节点选中----白昱----start*/\n    updated() {\n        if(this.orgTree[0].code){\n            this.$refs[this.options.ref].setCurrentKey(this.orgTree[0].code)\n            this.$emit(\"currentChange\",this.orgTree[0].code, this.orgTree[0].caption);\n        }\n    },\n    /*假数据第一节点选中----白昱----end*/\n    methods: {\n        currentChange(data, node) {\n            this.$emit(\"currentChange\", data[this.options.nodeKey], data.caption);\n        },\n        loadNode(node, resolve) {\n            let code = node.data[this.nodeKey]\n            this.CurrentNode = node;\n            this.$axios({\n                method: 'post',\n                // url: '/qxgl-center/Qxgl002OrgCtrl/queryOrgTreeBySjorgId',\n                url: this.pctrl,\n                data: {\n                    code: code\n                }\n            }).then(function (res) {\n                console.log(res.info)\n                resolve(res.info)\n                return res.info;\n            }).then((info) => {\n                /*懒加载节点展开，第一节点选中----白昱----start*/\n                if (node.level === 0) {\n                    for (let i = 0; i < info.length; i++) {\n                        let mynode = node.childNodes[i];\n                        mynode.expanded = true;\n                        this.$refs[\"org_tree\"].updateKeyChildren(info[i].code, info[i].children)\n                    }\n                    this.$refs[\"org_tree\"].setCurrentKey(info[0].code)\n                    this.$emit(\"currentChange\", info[0].code, info[0].caption);\n                }\n                /*懒加载节点展开，第一节点选中----白昱----end*/\n            }).catch(function (error) {\n                window.console.log(error);\n            });\n        },\n        updateNode(key, data) {\n            let options = this.options\n            let nodeKey = options.nodeKey\n            let label = options.props.label\n            let ref = options.ref\n            let tree = this.$refs[ref]\n            if (tree) {\n                let node = tree.getNode({\n                    code: key\n                })\n                let childrenNodes = node.childNodes\n                let children = []\n                let id = data[nodeKey]\n                let newFlag = true\n                childrenNodes.forEach((item) => {\n                    let tId = item.data[nodeKey]\n                    if (id == tId) {\n                        item.data[label] = data[label]\n                        newFlag = false\n                    }\n                    children.push(item.data)\n                })\n                if (newFlag) {\n                    children.push(data)\n                }\n                tree.updateKeyChildren(key, children)\n                tree.store.nodesMap[key].expanded = true;\n                this.expandParent(node.parent)\n            }\n        },\n        expandParent(node) {\n            let ref = this.options.ref\n            let tree = this.$refs[ref]\n            if (node) {\n                let id = node.data[this.options.nodeKey]\n                tree.store.nodesMap[id].expanded = true;\n            }\n        },\n        setCurrentKey(key) {\n            let ref = this.options.ref\n            let tree = this.$refs[ref]\n            tree.setCurrentKey(key)\n        }\n    }, computed: {\n        options() {\n            let currentNodeKey = \"\"\n            if (this.orgTree.length > 0) {\n                currentNodeKey = this.orgTree[0].code\n            }\n\n            return {\n                class: \"org_tree\",\n                ref: \"org_tree\",\n                indent: 12,\n                nodeKey: this.nodeKey,\n                props: this.treeProps,\n                expandOnClickNode: false,\n                checkOnClickNode: true,\n                highlightCurrent: true,\n                iconClass: \"el-icon-arrow-right\",\n                currrentNodeKey: currentNodeKey,\n                defaultExpandedKeys: [currentNodeKey]\n            }\n        }\n    }\n}\n",{"version":3,"sources":["orgTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"orgTree.vue","sourceRoot":"src/components/orgTree","sourcesContent":["<template>\r\n    <el-tree :class=\"options.class\"\r\n             :ref=\"options.ref\"\r\n             :lazy=\"lazy\"\r\n             :load=\"loadNode\"\r\n             :data=\"orgTree\"\r\n             :props=\"options.props\"\r\n             :indent=\"options.indent\"\r\n             :node-key=\"options.nodeKey\"\r\n             :expand-on-click-node=\"options.expandOnClickNode\"\r\n             :check-on-click-node=\"options.checkOnClickNode\"\r\n             :highlight-current=\"options.highlightCurrent\"\r\n             :icon-class=\"options.iconClass\"\r\n             :current-node-key=\"options.currrentNodeKey\"\r\n             :default-expanded-keys=\"options.defaultExpandedKeys\"\r\n             @current-change=\"currentChange\">\r\n        <span class=\"org_tree_node\" slot-scope=\"{ node, data }\">\r\n            <i :class=\"[node.icon?node.icon:'el-icon-notebook-2', 'org_tree_node_icon']\"></i>\r\n            <span>{{node.label}}</span>\r\n        </span>\r\n    </el-tree>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"deptTree\",\r\n        props: {\r\n            treeProps: {\r\n                type: Object,\r\n                default: () => {\r\n                    return {\r\n                        label: \"label\"\r\n                    }\r\n                }\r\n            },\r\n            nodeKey: {\r\n                type: String,\r\n                default: \"id\"\r\n            },\r\n            lazy: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            pctrl: {\r\n                type: String,\r\n                default: '/qxgl-center/Qxgl002OrgCtrl/queryOrgTreeBySjorgId'\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                orgTree: [],\r\n                searchText: \"\",\r\n                CurrentNode: []\r\n            }\r\n        },\r\n        /*假数据第一节点选中----白昱----start*/\r\n        updated() {\r\n            if(this.orgTree[0].code){\r\n                this.$refs[this.options.ref].setCurrentKey(this.orgTree[0].code)\r\n                this.$emit(\"currentChange\",this.orgTree[0].code, this.orgTree[0].caption);\r\n            }\r\n        },\r\n        /*假数据第一节点选中----白昱----end*/\r\n        methods: {\r\n            currentChange(data, node) {\r\n                this.$emit(\"currentChange\", data[this.options.nodeKey], data.caption);\r\n            },\r\n            loadNode(node, resolve) {\r\n                let code = node.data[this.nodeKey]\r\n                this.CurrentNode = node;\r\n                this.$axios({\r\n                    method: 'post',\r\n                    // url: '/qxgl-center/Qxgl002OrgCtrl/queryOrgTreeBySjorgId',\r\n                    url: this.pctrl,\r\n                    data: {\r\n                        code: code\r\n                    }\r\n                }).then(function (res) {\r\n                    console.log(res.info)\r\n                    resolve(res.info)\r\n                    return res.info;\r\n                }).then((info) => {\r\n                    /*懒加载节点展开，第一节点选中----白昱----start*/\r\n                    if (node.level === 0) {\r\n                        for (let i = 0; i < info.length; i++) {\r\n                            let mynode = node.childNodes[i];\r\n                            mynode.expanded = true;\r\n                            this.$refs[\"org_tree\"].updateKeyChildren(info[i].code, info[i].children)\r\n                        }\r\n                        this.$refs[\"org_tree\"].setCurrentKey(info[0].code)\r\n                        this.$emit(\"currentChange\", info[0].code, info[0].caption);\r\n                    }\r\n                    /*懒加载节点展开，第一节点选中----白昱----end*/\r\n                }).catch(function (error) {\r\n                    window.console.log(error);\r\n                });\r\n            },\r\n            updateNode(key, data) {\r\n                let options = this.options\r\n                let nodeKey = options.nodeKey\r\n                let label = options.props.label\r\n                let ref = options.ref\r\n                let tree = this.$refs[ref]\r\n                if (tree) {\r\n                    let node = tree.getNode({\r\n                        code: key\r\n                    })\r\n                    let childrenNodes = node.childNodes\r\n                    let children = []\r\n                    let id = data[nodeKey]\r\n                    let newFlag = true\r\n                    childrenNodes.forEach((item) => {\r\n                        let tId = item.data[nodeKey]\r\n                        if (id == tId) {\r\n                            item.data[label] = data[label]\r\n                            newFlag = false\r\n                        }\r\n                        children.push(item.data)\r\n                    })\r\n                    if (newFlag) {\r\n                        children.push(data)\r\n                    }\r\n                    tree.updateKeyChildren(key, children)\r\n                    tree.store.nodesMap[key].expanded = true;\r\n                    this.expandParent(node.parent)\r\n                }\r\n            },\r\n            expandParent(node) {\r\n                let ref = this.options.ref\r\n                let tree = this.$refs[ref]\r\n                if (node) {\r\n                    let id = node.data[this.options.nodeKey]\r\n                    tree.store.nodesMap[id].expanded = true;\r\n                }\r\n            },\r\n            setCurrentKey(key) {\r\n                let ref = this.options.ref\r\n                let tree = this.$refs[ref]\r\n                tree.setCurrentKey(key)\r\n            }\r\n        }, computed: {\r\n            options() {\r\n                let currentNodeKey = \"\"\r\n                if (this.orgTree.length > 0) {\r\n                    currentNodeKey = this.orgTree[0].code\r\n                }\r\n\r\n                return {\r\n                    class: \"org_tree\",\r\n                    ref: \"org_tree\",\r\n                    indent: 12,\r\n                    nodeKey: this.nodeKey,\r\n                    props: this.treeProps,\r\n                    expandOnClickNode: false,\r\n                    checkOnClickNode: true,\r\n                    highlightCurrent: true,\r\n                    iconClass: \"el-icon-arrow-right\",\r\n                    currrentNodeKey: currentNodeKey,\r\n                    defaultExpandedKeys: [currentNodeKey]\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    /*部门树样式*/\r\n    .org_main_container {\r\n        height: 100%;\r\n        font-size: 12px !important;\r\n    }\r\n\r\n    .org_main_container > .el-aside {\r\n        box-shadow: 0 1px 6px 0 rgba(0, 0, 0, .12);\r\n    }\r\n\r\n    .org_container {\r\n        background-color: @bgWhite;\r\n        height: 100%;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .org_container > .el-main {\r\n        height: 200px;\r\n        padding: 0px;\r\n        padding-left: 14px;\r\n        overflow-y: scroll;\r\n        margin-right: -17px;\r\n        padding-right: 17px;\r\n    }\r\n\r\n    .org_tree {\r\n    }\r\n\r\n    .org_tree_node_icon {\r\n        color: @themeColor;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    /*深度选择器\"/deep/\"*/\r\n    .org_tree /deep/ .el-tree-node__content:hover {\r\n        background-color: transparent;\r\n        color: @themeColor;\r\n    }\r\n\r\n    .org_tree .org_tree_node > span {\r\n        padding: 3px 4px;\r\n    }\r\n\r\n    .org_tree /deep/ .el-tree-node:focus > .el-tree-node__content {\r\n        background-color: transparent;\r\n    }\r\n\r\n    .org_tree.el-tree--highlight-current /deep/ .el-tree-node.is-current > .el-tree-node__content {\r\n        background-color: transparent;\r\n    }\r\n\r\n    .org_tree.el-tree--highlight-current /deep/ .el-tree-node.is-current > .el-tree-node__content > .org_tree_node > span {\r\n        background-color: @themeColor;\r\n        color: @bgWhite;\r\n    }\r\n\r\n    .tree_title {\r\n        font-size: 12px;\r\n        color: @textColor2;\r\n        line-height: 32px;\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .tree_title > i {\r\n        font-size: 21px;\r\n        margin-right: 5px;\r\n        vertical-align: middle;\r\n    }\r\n\r\n    /deep/ .search_input {\r\n        margin: 20px 0px;\r\n    }\r\n\r\n    /deep/ .search_input .el-input__inner {\r\n        height: 32px;\r\n        line-height: 32px;\r\n    }\r\n\r\n    /deep/ .search_input .el-input__icon {\r\n        line-height: 32px;\r\n    }\r\n\r\n    .org_main_container > .el-main {\r\n        padding: 0px;\r\n        width: 20px;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    .tree_toggle {\r\n        width: 16px;\r\n        height: 60px;\r\n        background: #B5B5B5;\r\n        border-radius: 0 100px 100px 0;\r\n        cursor: pointer;\r\n        font-size: 16px;\r\n        line-height: 60px;\r\n        color: @bgWhite;\r\n    }\r\n\r\n</style>\r\n"]}]}