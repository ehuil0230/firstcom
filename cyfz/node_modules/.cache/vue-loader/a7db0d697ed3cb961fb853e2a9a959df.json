{"remainingRequest":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vueWorkspace\\cyfz\\src\\components\\toolbar\\myToolbar.vue?vue&type=style&index=0&id=1d18093b&scoped=true&lang=css&","dependencies":[{"path":"D:\\vueWorkspace\\cyfz\\src\\components\\toolbar\\myToolbar.vue","mtime":1569056100096},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.toolbar{\n    overflow: hidden;\n    border-radius: 4px;\n    position: absolute;\n    z-index: 99;\n    width:25%;\n    margin: 0px 0 0px 0;\n}\n.toolbar.right{\n    position: fixed;\n    right: 10px;\n    width: 50px;\n}\n.toolbar>.top{\n    width: 68px;\n    height: 32px;\n    white-space: nowrap;\n}\n.toolbar>.top.padding60{\n    padding: 0px 50px;\n}\n.toolbar>.right.padding60_0{\n    padding: 50px 0px;\n}\n.toolbar>.top >>> .el-button.leftBtn{\n    position: absolute;\n    left: 0;\n    font-size: 2em;\n}\n.toolbar>.top >>> .el-button.rightBtn{\n    position: absolute;\n    right: 0;\n    font-size: 2em;\n}\n\n.toolbar>.right >>> .el-button.upBtn{\n    position: absolute;\n    top: 0;\n    margin-top: 0px;\n    font-size: 2em;\n}\n.toolbar>.right >>> .el-button.downBtn{\n    position: absolute;\n    bottom: 0;\n    font-size: 2em;\n}\n\n.toolbar .top >>> .el-button {\n    width: 68px;\n    height: 32px;\n    padding: 0px;\n    vertical-align: top;\n    font-size: 10px;\n}\n.toolbar>.right{\n    display: block;\n}\n.toolbar .right >>> .el-button {\n    width: 50px;\n    height: 50px;\n    padding: 0px;\n    margin-top: 10px;\n    display: block;\n    font-size: 10px;\n}\n.toolbar>.right >>> .el-button+.el-button {\n    margin-left: 0px;\n}\n.toolbar .right >>> .el-button [class*=el-icon-]+span {\n    margin-left: 0px;\n}\n",{"version":3,"sources":["myToolbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"myToolbar.vue","sourceRoot":"src/components/toolbar","sourcesContent":["<template>\r\n    <div class=\"toolbar\">\r\n        <div :class=\"position\" class=\"wrap\">\r\n            <el-button class=\"leftBtn\"  v-if=\"isShowHBtn\" icon=\"el-icon-arrow-left\" @mousedown.native=\"leftBtnClick\" @mouseup.native=\"clearTimer\"></el-button>\r\n            <el-button class=\"upBtn\"  v-if=\"isShowVBtn\" icon=\"el-icon-arrow-up\" @mousedown.native=\"upBtnClick\" @mouseup.native=\"clearTimer\"></el-button>\r\n            <template v-for=\"item of toolbarItem\">\r\n                <el-button v-if=\"item.icon\" :disabled=\"item.disabled\" :type=\"item.type\" :icon=\"display==='block' ? item.icon + ' el-block': item.icon\" @click=\"click(item,$event)\">{{item.title}}</el-button>\r\n                <el-button v-else   :disabled=\"item.disabled\"  :type=\"item.type\" @click=\"click(item,$event)\">{{item.title}}</el-button>\r\n            </template>\r\n            <el-button class=\"rightBtn\"  v-if=\"isShowHBtn\" icon=\"el-icon-arrow-right\" @mousedown.native=\"rightBtnClick\" @mouseup.native=\"clearTimer\"></el-button>\r\n            <el-button class=\"downBtn\"  v-if=\"isShowVBtn\" icon=\"el-icon-arrow-down\" @mousedown.native=\"downBtnClick\" @mouseup.native=\"clearTimer\"></el-button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"toolbar\",\r\n        props:{\r\n            position:{\r\n                type: String,\r\n                default:\"top\"\r\n            },\r\n            display:{\r\n                type: String,\r\n                default: \"block\"\r\n            },\r\n            toolbarItem:Array\r\n        },\r\n        data(){\r\n            return {\r\n                clientWidth: 0,\r\n                clientHeight: 0,\r\n                totalWidth: 0,\r\n                totalHeight: 0,\r\n                isShowHBtn:false,\r\n                isShowVBtn:false,\r\n                clientMarginLR: 0,\r\n                timer: 0\r\n            }\r\n        },\r\n        methods:{\r\n            rightBtnClick: function(){\r\n                let step = 10\r\n                let _this = this;\r\n                let dis = this.totalWidth - this.$el.offsetWidth + 120\r\n                let $tt = $(this.$el.querySelector(\".wrap\"))\r\n\r\n                this.timer = setInterval(function () {\r\n                    let marginLeft = parseInt($tt.css(\"marginLeft\"))\r\n                    if(marginLeft > -dis){\r\n                        if(marginLeft-step<= -dis){\r\n                            $tt.css({marginLeft: -dis+\"px\"})\r\n                        }else{\r\n                            $tt.css({marginLeft: marginLeft-step+\"px\"})\r\n                        }\r\n                    }else{\r\n                        $tt.css({marginLeft: -dis+\"px\"})\r\n                        clearInterval(_this.timer);\r\n                    }\r\n                },100)\r\n            },\r\n            leftBtnClick: function(){\r\n                let step = 10\r\n                let _this = this\r\n                let $tt = $(this.$el.querySelector(\".wrap\"))\r\n\r\n                this.timer = setInterval(function () {\r\n                    let marginLeft = parseInt($tt.css(\"margin-left\"))\r\n                    if(marginLeft < 0 ){\r\n                        if(marginLeft+step>=0){\r\n                            $tt.css({marginLeft: \"0px\"})\r\n                        }else{\r\n                            $tt.css({marginLeft: marginLeft+step+\"px\"})\r\n                        }\r\n                    }else{\r\n                        clearInterval(_this.timer);\r\n                        $tt.css({marginLeft: \"0px\"})\r\n                    }\r\n                },100)\r\n            },\r\n            downBtnClick: function(){\r\n                let step = 10\r\n                let _this = this;\r\n                let dis = this.totalHeight - this.$el.offsetHeight + 110\r\n                let $tt = $(this.$el.querySelector(\".wrap\"))\r\n\r\n                this.timer = setInterval(function () {\r\n                    let marginTop = parseInt($tt.css(\"margin-Top\"))\r\n                    if(marginTop > -dis){\r\n                        if(marginTop-step<= -dis){\r\n                            $tt.css({marginTop: -dis+\"px\"})\r\n                        }else{\r\n                            $tt.css({marginTop: marginTop-step+\"px\"})\r\n                        }\r\n                    }else{\r\n                        $tt.css({marginTop: -dis+\"px\"})\r\n                        clearInterval(_this.timer);\r\n                    }\r\n                },100)\r\n            },\r\n            upBtnClick: function(){\r\n                let step = 10\r\n                let _this = this\r\n                let $tt = $(this.$el.querySelector(\".wrap\"))\r\n\r\n                this.timer = setInterval(function () {\r\n                    let marginTop = parseInt($tt.css(\"margin-Top\"))\r\n                    if(marginTop < 0 ){\r\n                        if(marginTop+step>=0){\r\n                            $tt.css({marginTop: \"0px\"})\r\n                        }else{\r\n                            $tt.css({marginTop: marginTop+step+\"px\"})\r\n                        }\r\n                    }else{\r\n                        clearInterval(_this.timer);\r\n                        $tt.css({marginTop: \"0px\"})\r\n                    }\r\n                },100)\r\n            },\r\n            clearTimer:function(){\r\n                clearInterval(this.timer);\r\n            },\r\n            click:function(item,event){\r\n                this.$emit(\"toolbarClick\",item,event)\r\n            },\r\n            getTotalWidth:function(){\r\n                let totalWidth = 0\r\n                let items = this.$el.getElementsByTagName('button')\r\n                for(let i=0;i<items.length;i++){\r\n                    totalWidth += $(items[i]).outerWidth(true);\r\n                }\r\n                this.totalWidth = totalWidth;\r\n            },\r\n            getTotalHeight:function(){\r\n                let totalHeight = 0\r\n                let items = this.$el.getElementsByTagName('button')\r\n                for(let i=0;i<items.length;i++){\r\n                    totalHeight += $(items[i]).outerHeight(true);\r\n                }\r\n                this.totalHeight = totalHeight;\r\n            },\r\n\r\n            adjustFrame:function(){\r\n                if(this.position==\"top\"){\r\n                    this.totalWidth==0 && this.getTotalWidth()\r\n                    if(this.totalWidth > this.clientWidth){\r\n                        this.isShowHBtn = true\r\n                        $(this.$el.getElementsByClassName('top')[0]).addClass('padding60')\r\n                    }else{\r\n                        this.isShowHBtn = false\r\n                        var tt = this.$el.querySelector(\".wrap\")\r\n                        var $tt = $(tt).css(\"marginLeft\",\"0px\");\r\n                        $(this.$el.getElementsByClassName('top')[0]).removeClass('padding60')\r\n                    }\r\n                }else if(this.position==\"right\"){\r\n                    this.totalHeight==0 && this.getTotalHeight()\r\n                    if(this.totalHeight > this.clientHeight){\r\n                        this.isShowVBtn = true\r\n                        $(this.$el.getElementsByClassName('right')[0]).addClass('padding60_0')\r\n                    }else{\r\n                        this.isShowVBtn = false\r\n                        $(this.$el.querySelector(\".wrap\")).css(\"marginTop\",\"0px\");\r\n                        $(this.$el.getElementsByClassName('right')[0]).removeClass('padding60_0')\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        watch: {\r\n            '$store.state.screenWidth'(newValue, oldValue) {\r\n                this.clientWidth = this.$el.clientWidth\r\n                this.adjustFrame()\r\n            },\r\n            '$store.state.contentHeight'(newValue, oldValue) {\r\n                this.clientHeight = this.$store.state.contentHeight - this.clientMarginLR\r\n                if(this.position == 'right') {\r\n                    this.$el.style.height = this.clientHeight + 'px'\r\n                }\r\n                this.adjustFrame()\r\n            }\r\n        },\r\n        mounted(){\r\n            this.clientWidth = this.$el.clientWidth\r\n            console.info(this.$store.state.contentHeight,\"222\")\r\n            this.clientHeight = this.$store.state.contentHeight\r\n            if(this.position == 'right'){\r\n                this.clientMarginLR = parseInt(this.$el.style.marginTop) + parseInt(this.$el.style.marginBottom)\r\n                this.$el.style.height = this.clientHeight-this.clientMarginLR+'px'\r\n                this.$el.className += ' right'\r\n            }\r\n            this.adjustFrame()\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .toolbar{\r\n        overflow: hidden;\r\n        border-radius: 4px;\r\n        position: absolute;\r\n        z-index: 99;\r\n        width:25%;\r\n        margin: 0px 0 0px 0;\r\n    }\r\n    .toolbar.right{\r\n        position: fixed;\r\n        right: 10px;\r\n        width: 50px;\r\n    }\r\n    .toolbar>.top{\r\n        width: 68px;\r\n        height: 32px;\r\n        white-space: nowrap;\r\n    }\r\n    .toolbar>.top.padding60{\r\n        padding: 0px 50px;\r\n    }\r\n    .toolbar>.right.padding60_0{\r\n        padding: 50px 0px;\r\n    }\r\n    .toolbar>.top >>> .el-button.leftBtn{\r\n        position: absolute;\r\n        left: 0;\r\n        font-size: 2em;\r\n    }\r\n    .toolbar>.top >>> .el-button.rightBtn{\r\n        position: absolute;\r\n        right: 0;\r\n        font-size: 2em;\r\n    }\r\n\r\n    .toolbar>.right >>> .el-button.upBtn{\r\n        position: absolute;\r\n        top: 0;\r\n        margin-top: 0px;\r\n        font-size: 2em;\r\n    }\r\n    .toolbar>.right >>> .el-button.downBtn{\r\n        position: absolute;\r\n        bottom: 0;\r\n        font-size: 2em;\r\n    }\r\n\r\n    .toolbar .top >>> .el-button {\r\n        width: 68px;\r\n        height: 32px;\r\n        padding: 0px;\r\n        vertical-align: top;\r\n        font-size: 10px;\r\n    }\r\n    .toolbar>.right{\r\n        display: block;\r\n    }\r\n    .toolbar .right >>> .el-button {\r\n        width: 50px;\r\n        height: 50px;\r\n        padding: 0px;\r\n        margin-top: 10px;\r\n        display: block;\r\n        font-size: 10px;\r\n    }\r\n    .toolbar>.right >>> .el-button+.el-button {\r\n        margin-left: 0px;\r\n    }\r\n    .toolbar .right >>> .el-button [class*=el-icon-]+span {\r\n        margin-left: 0px;\r\n    }\r\n</style>"]}]}