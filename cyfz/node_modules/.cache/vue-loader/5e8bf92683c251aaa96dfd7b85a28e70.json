{"remainingRequest":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vueWorkspace\\cyfz\\src\\components\\cropper\\cropper.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vueWorkspace\\cyfz\\src\\components\\cropper\\cropper.vue","mtime":1569207614556},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from 'vue'\nimport VueCropper from 'vue-cropper'\nVue.use(VueCropper)\nexport default {\n    name: \"cropper\",\n    props:{\n        initList:{\n            type: Array,\n            default: []\n        },\n        type:{\n            type:String,\n            default:\"base64\"\n        },\n        outputType:{\n            type:String,\n            default:\"png\"\n        },\n        aspectRatio:{\n            default: function () {\n                return [1,1]\n            },\n            type: Array\n        },\n        limit:{\n            type: Number,\n            default: 1\n        }\n    },\n    data() {\n        return {\n            previewVisible: false,\n            imageUrl: '',\n            previewUrl:\"\",\n            // 裁剪组件的基础配置option\n            defaultOptions: {\n                url:'',\n                img: '', // 裁剪图片的地址\n                info: true, // 裁剪框的大小信息\n                outputSize: 0.8, // 裁剪生成图片的质量\n                outputType: 'png', // 裁剪生成图片的格式\n                canScale: false, // 图片是否允许滚轮缩放\n                autoCrop: true, // 是否默认生成截图框\n                // autoCropWidth: 300, // 默认生成截图框宽度\n                // autoCropHeight: 200, // 默认生成截图框高度\n                fixedBox: false, // 固定截图框大小 不允许改变\n                fixed: true, // 是否开启截图框宽高固定比例\n                fixedNumber: [1, 1], // 截图框的宽高比例\n                full: true, // 是否输出原图比例的截图\n                canMove: true,\n                canMoveBox: true, // 截图框能否拖动\n                original: false, // 上传图片按照原始比例渲染\n                centerBox: false, // 截图框是否被限制在图片里面\n                infoTrue: true // true 为展示真实输出图片宽高 false 展示看到的截图框宽高\n            },\n            fileList:[],\n            tempList:[],\n            currentFile:{},\n            currentFileName:\"\",\n            $preview:\"\",\n            // 防止重复提交\n            loading: false,\n            dialogVisible:false\n        }\n    },\n    created(){\n        let _that = this\n        this.defaultOptions.fixedNumber = this.aspectRatio\n        this.defaultOptions.outputType = this.outputType\n        this.tempList = this.initList || []\n        this.initList.forEach((item,index)=>{\n            item.url = _that.$api.upload.reqUrl+ _that.$api.upload.downloadByMd5Path+\"?md5Path=\"+item.md5Path+ \"&access_token=\"+localStorage.getItem(\"access_token\")\n        })\n    },\n    mounted(){\n        this.$preview = $(this.$el.querySelector('.preview'))\n    },\n    watch:{\n        'tempList'(){\n            this.$emit(\"uploadList\",this.tempList);\n        }\n    },\n    methods: {\n        // 上传按钮   限制图片大小\n        changeUpload(file, fileList) {\n            if(this.tempList.length>=this.limit){\n                return;\n            }\n            const isLt5M = file.size / 1024 / 1024 < 5\n            if (!isLt5M) {\n                this.$message.error('上传文件大小不能超过 5MB!')\n                return false\n            }\n            this.imageUrl = file.url\n            this.currentFile = file;\n            this.currentFileName=file.name\n            this.defaultOptions.img = file.url\n            this.dialogVisible = true\n        },\n        // 点击裁剪，这一步是可以拿到处理后的地址\n        finish() {\n            const _that = this;\n            if (this.type === 'blob') {\n                this.$refs.cropper.getCropBlob((data) => {\n                    let file = _that.$$blobToFile(data,_that.currentFileName)\n                    let modelSrc = window.URL.createObjectURL(data);\n                    _that.uploadFile(file,modelSrc)\n                })\n            } else {//base64\n                this.$refs.cropper.getCropData((data) => {\n                    let file = _that.$$blobToFile(_that.$$base64toBlob(data),_that.currentFileName)\n                    let modelSrc = data\n                    _that.uploadFile(file,modelSrc)\n                })\n            }\n        },\n\n        uploadFile(file,modelSrc){\n            const _that = this;\n            _that.loading = true\n            _that.$$md5ByFile({file:file}).then((res)=>{\n                _that.$$md5CheckByFile({md5:res.md5,file:file}).then((checkRes)=>{\n                    if(checkRes && checkRes.msg === \"正常上传\"){\n                        _that.$$uploadFile({md5:res.md5,file:file}).then(function(response){\n                            let url = _that.$api.upload.reqUrl+ _that.$api.upload.downloadByMd5Path+\"?md5Path=\"+response.info.md5Path+ \"&access_token=\"+localStorage.getItem(\"access_token\")\n                            _that.currentFile.modelSrc = modelSrc\n                            _that.currentFile.url = url\n                            _that.currentFile.md5Path = response.info.md5Path\n                            _that.currentFile.raw = file\n                            _that.tempList.push(_that.currentFile)\n\n                            _that.loading = false\n                            _that.dialogVisible = false\n                        }).catch(()=>{\n                            _that.loading = false\n                            _that.dialogVisible = false\n                        })\n                    }else if (checkRes && checkRes.msg === \"已上传\"){\n                        let md5Path = checkRes.info.md5Path\n                        let url = _that.$api.upload.reqUrl+ _that.$api.upload.downloadByMd5Path+\"?md5Path=\"+md5Path+ \"&access_token=\"+localStorage.getItem(\"access_token\")\n                        _that.currentFile.modelSrc = modelSrc\n                        _that.currentFile.md5Path = md5Path\n                        _that.currentFile.url = url\n                        _that.currentFile.raw = file\n                        _that.tempList.push(_that.currentFile)\n                        _that.loading = false\n                        _that.dialogVisible = false\n\n                    }else{\n                        _that.loading = false\n                        _that.dialogVisible = false\n                    }\n                }).catch(function (error) {\n                    _that.loading = false\n                    _that.dialogVisible = false\n                })\n            }).catch(function (error) {\n                _that.loading = false\n                _that.dialogVisible = false\n            })\n        },\n        imgMouseOver(index){\n            const _that = this;\n            var $div = $(\"<div class='hoverImg'></div>\");\n            this.$preview.find('.imgWrap').eq(index).append($div)\n            $div.append(\"<span class='imgzoomin'><i class=\\\"el-icon-zoom-in\\\"></i></span><span class='imgdownload'><i class=\\\"el-icon-download\\\"></i></span><span class='imgdelete'><i class=\\\"el-icon-delete\\\"></i></span>\")\n            $div.find('.imgdownload').on('click',function () {\n                var src = $(this).closest(\".imgWrap\").find('img').attr(\"src\")\n                _that.downLoad(src)\n            })\n            $div.find('.imgzoomin').on('click',function () {\n                _that.previewUrl = _that.tempList[index].url || _that.tempList[index].modelSrc\n                _that.previewVisible=true\n\n            })\n            $div.find('.imgdelete').on('click',function () {\n                _that.tempList.splice(index,1)\n            })\n        },\n        imgMouseLeave(index){\n            this.$preview.find('.imgWrap').eq(index).find('.hoverImg').remove()\n        },\n        downLoad(src){\n            console.info(src)\n            var aLink = document.createElement('a')\n            aLink.download = 'demo'\n            aLink.href=src\n            aLink.click()\n\n            // if (this.type === 'blob') {\n            //     this.$refs.cropper.getCropBlob((data) => {\n            //         aLink.href = window.URL.createObjectURL(data)\n            //         aLink.click()\n            //     })\n            // } else {\n            //     this.$refs.cropper.getCropData((data) => {\n            //         aLink.href = data\n            //         aLink.click()\n            //     })\n            // }\n        }\n    }\n}\n",{"version":3,"sources":["cropper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"cropper.vue","sourceRoot":"src/components/cropper","sourcesContent":["<!--\r\nnpm install vue-cropper\r\nimport VueCropper from 'vue-cropper'\r\nVue.use(VueCropper)\r\n\r\nuploadList:Array 已选择的图片列表，其中modelSrc存放图片内容\r\ntype:base64/blob\r\naspectRatio:宽高比 [3,2]\r\noutputType：输出图片格式，默认png\r\nlimit: 上传数量\r\ninitList: 初始化数组\r\n-->\r\n<template>\r\n    <div class=\"cropper-wrap\">\r\n        <!-- element 上传图片按钮 -->\r\n        <div class=\"upload\">\r\n            <el-upload :file-list=\"fileList\" multiple class=\"upload-demo\" action=\"\" drag  list-type=\"picture\"\r\n                       :auto-upload=\"false\" :show-file-list=\"false\"\r\n                       :on-change='changeUpload' accept=\"image/png, image/jpeg, image/gif, image/jpg\">\r\n                <!--                <i class=\"el-icon-upload\"></i>-->\r\n                <el-button slot=\"trigger\" size=\"small\" type=\"primary\">选择图片</el-button>\r\n                <!--                <div class=\"el-upload__text\">选择图片</div>-->\r\n                <!--                <div class=\"el-upload__tip\">支持绝大多数图片格式，单张图片最大支持5MB</div>-->\r\n            </el-upload>\r\n\r\n        </div>\r\n        <div class=\"preview\">\r\n            <div class=\"imgWrap\" v-for=\"(item,index) in tempList\" :key=\"item.uid\"  @mouseenter=\"imgMouseOver(index)\" @mouseleave=\"imgMouseLeave(index)\">\r\n                <img v-if=\"item.url\" :src=\"item.url\" />\r\n                <img v-else :src=\"item.modelSrc\" />\r\n            </div>\r\n        </div>\r\n        <!-- vueCropper 剪裁图片实现-->\r\n        <el-dialog title=\"图片剪裁\" :visible.sync=\"dialogVisible\">\r\n            <div class=\"cropper-content\">\r\n                <div class=\"cropper\" style=\"text-align:center\">\r\n                    <vueCropper\r\n                            ref=\"cropper\"\r\n                            :img=\"defaultOptions.img\"\r\n                            :outputSize=\"defaultOptions.size\"\r\n                            :outputType=\"defaultOptions.outputType\"\r\n                            :info=\"true\"\r\n                            :full=\"defaultOptions.full\"\r\n                            :canMove=\"defaultOptions.canMove\"\r\n                            :canMoveBox=\"defaultOptions.canMoveBox\"\r\n                            :original=\"defaultOptions.original\"\r\n                            :autoCrop=\"defaultOptions.autoCrop\"\r\n                            :fixed=\"defaultOptions.fixed\"\r\n                            :fixedNumber=\"defaultOptions.fixedNumber\"\r\n                            :centerBox=\"defaultOptions.centerBox\"\r\n                            :infoTrue=\"defaultOptions.infoTrue\"\r\n                            :fixedBox=\"defaultOptions.fixedBox\"\r\n                    ></vueCropper>\r\n                </div>\r\n            </div>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n                <el-button type=\"primary\" @click=\"finish\" :loading=\"loading\">确认</el-button>\r\n            </div>\r\n        </el-dialog>\r\n        <el-dialog title=\"图片预览\" :visible.sync=\"previewVisible\">\r\n            <div class=\"previewImg\">\r\n                <img :src=\"previewUrl\">\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Vue from 'vue'\r\n    import VueCropper from 'vue-cropper'\r\n    Vue.use(VueCropper)\r\n    export default {\r\n        name: \"cropper\",\r\n        props:{\r\n            initList:{\r\n                type: Array,\r\n                default: []\r\n            },\r\n            type:{\r\n                type:String,\r\n                default:\"base64\"\r\n            },\r\n            outputType:{\r\n                type:String,\r\n                default:\"png\"\r\n            },\r\n            aspectRatio:{\r\n                default: function () {\r\n                    return [1,1]\r\n                },\r\n                type: Array\r\n            },\r\n            limit:{\r\n                type: Number,\r\n                default: 1\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                previewVisible: false,\r\n                imageUrl: '',\r\n                previewUrl:\"\",\r\n                // 裁剪组件的基础配置option\r\n                defaultOptions: {\r\n                    url:'',\r\n                    img: '', // 裁剪图片的地址\r\n                    info: true, // 裁剪框的大小信息\r\n                    outputSize: 0.8, // 裁剪生成图片的质量\r\n                    outputType: 'png', // 裁剪生成图片的格式\r\n                    canScale: false, // 图片是否允许滚轮缩放\r\n                    autoCrop: true, // 是否默认生成截图框\r\n                    // autoCropWidth: 300, // 默认生成截图框宽度\r\n                    // autoCropHeight: 200, // 默认生成截图框高度\r\n                    fixedBox: false, // 固定截图框大小 不允许改变\r\n                    fixed: true, // 是否开启截图框宽高固定比例\r\n                    fixedNumber: [1, 1], // 截图框的宽高比例\r\n                    full: true, // 是否输出原图比例的截图\r\n                    canMove: true,\r\n                    canMoveBox: true, // 截图框能否拖动\r\n                    original: false, // 上传图片按照原始比例渲染\r\n                    centerBox: false, // 截图框是否被限制在图片里面\r\n                    infoTrue: true // true 为展示真实输出图片宽高 false 展示看到的截图框宽高\r\n                },\r\n                fileList:[],\r\n                tempList:[],\r\n                currentFile:{},\r\n                currentFileName:\"\",\r\n                $preview:\"\",\r\n                // 防止重复提交\r\n                loading: false,\r\n                dialogVisible:false\r\n            }\r\n        },\r\n        created(){\r\n            let _that = this\r\n            this.defaultOptions.fixedNumber = this.aspectRatio\r\n            this.defaultOptions.outputType = this.outputType\r\n            this.tempList = this.initList || []\r\n            this.initList.forEach((item,index)=>{\r\n                item.url = _that.$api.upload.reqUrl+ _that.$api.upload.downloadByMd5Path+\"?md5Path=\"+item.md5Path+ \"&access_token=\"+localStorage.getItem(\"access_token\")\r\n            })\r\n        },\r\n        mounted(){\r\n            this.$preview = $(this.$el.querySelector('.preview'))\r\n        },\r\n        watch:{\r\n            'tempList'(){\r\n                this.$emit(\"uploadList\",this.tempList);\r\n            }\r\n        },\r\n        methods: {\r\n            // 上传按钮   限制图片大小\r\n            changeUpload(file, fileList) {\r\n                if(this.tempList.length>=this.limit){\r\n                    return;\r\n                }\r\n                const isLt5M = file.size / 1024 / 1024 < 5\r\n                if (!isLt5M) {\r\n                    this.$message.error('上传文件大小不能超过 5MB!')\r\n                    return false\r\n                }\r\n                this.imageUrl = file.url\r\n                this.currentFile = file;\r\n                this.currentFileName=file.name\r\n                this.defaultOptions.img = file.url\r\n                this.dialogVisible = true\r\n            },\r\n            // 点击裁剪，这一步是可以拿到处理后的地址\r\n            finish() {\r\n                const _that = this;\r\n                if (this.type === 'blob') {\r\n                    this.$refs.cropper.getCropBlob((data) => {\r\n                        let file = _that.$$blobToFile(data,_that.currentFileName)\r\n                        let modelSrc = window.URL.createObjectURL(data);\r\n                        _that.uploadFile(file,modelSrc)\r\n                    })\r\n                } else {//base64\r\n                    this.$refs.cropper.getCropData((data) => {\r\n                        let file = _that.$$blobToFile(_that.$$base64toBlob(data),_that.currentFileName)\r\n                        let modelSrc = data\r\n                        _that.uploadFile(file,modelSrc)\r\n                    })\r\n                }\r\n            },\r\n\r\n            uploadFile(file,modelSrc){\r\n                const _that = this;\r\n                _that.loading = true\r\n                _that.$$md5ByFile({file:file}).then((res)=>{\r\n                    _that.$$md5CheckByFile({md5:res.md5,file:file}).then((checkRes)=>{\r\n                        if(checkRes && checkRes.msg === \"正常上传\"){\r\n                            _that.$$uploadFile({md5:res.md5,file:file}).then(function(response){\r\n                                let url = _that.$api.upload.reqUrl+ _that.$api.upload.downloadByMd5Path+\"?md5Path=\"+response.info.md5Path+ \"&access_token=\"+localStorage.getItem(\"access_token\")\r\n                                _that.currentFile.modelSrc = modelSrc\r\n                                _that.currentFile.url = url\r\n                                _that.currentFile.md5Path = response.info.md5Path\r\n                                _that.currentFile.raw = file\r\n                                _that.tempList.push(_that.currentFile)\r\n\r\n                                _that.loading = false\r\n                                _that.dialogVisible = false\r\n                            }).catch(()=>{\r\n                                _that.loading = false\r\n                                _that.dialogVisible = false\r\n                            })\r\n                        }else if (checkRes && checkRes.msg === \"已上传\"){\r\n                            let md5Path = checkRes.info.md5Path\r\n                            let url = _that.$api.upload.reqUrl+ _that.$api.upload.downloadByMd5Path+\"?md5Path=\"+md5Path+ \"&access_token=\"+localStorage.getItem(\"access_token\")\r\n                            _that.currentFile.modelSrc = modelSrc\r\n                            _that.currentFile.md5Path = md5Path\r\n                            _that.currentFile.url = url\r\n                            _that.currentFile.raw = file\r\n                            _that.tempList.push(_that.currentFile)\r\n                            _that.loading = false\r\n                            _that.dialogVisible = false\r\n\r\n                        }else{\r\n                            _that.loading = false\r\n                            _that.dialogVisible = false\r\n                        }\r\n                    }).catch(function (error) {\r\n                        _that.loading = false\r\n                        _that.dialogVisible = false\r\n                    })\r\n                }).catch(function (error) {\r\n                    _that.loading = false\r\n                    _that.dialogVisible = false\r\n                })\r\n            },\r\n            imgMouseOver(index){\r\n                const _that = this;\r\n                var $div = $(\"<div class='hoverImg'></div>\");\r\n                this.$preview.find('.imgWrap').eq(index).append($div)\r\n                $div.append(\"<span class='imgzoomin'><i class=\\\"el-icon-zoom-in\\\"></i></span><span class='imgdownload'><i class=\\\"el-icon-download\\\"></i></span><span class='imgdelete'><i class=\\\"el-icon-delete\\\"></i></span>\")\r\n                $div.find('.imgdownload').on('click',function () {\r\n                    var src = $(this).closest(\".imgWrap\").find('img').attr(\"src\")\r\n                    _that.downLoad(src)\r\n                })\r\n                $div.find('.imgzoomin').on('click',function () {\r\n                    _that.previewUrl = _that.tempList[index].url || _that.tempList[index].modelSrc\r\n                    _that.previewVisible=true\r\n\r\n                })\r\n                $div.find('.imgdelete').on('click',function () {\r\n                    _that.tempList.splice(index,1)\r\n                })\r\n            },\r\n            imgMouseLeave(index){\r\n                this.$preview.find('.imgWrap').eq(index).find('.hoverImg').remove()\r\n            },\r\n            downLoad(src){\r\n                console.info(src)\r\n                var aLink = document.createElement('a')\r\n                aLink.download = 'demo'\r\n                aLink.href=src\r\n                aLink.click()\r\n\r\n                // if (this.type === 'blob') {\r\n                //     this.$refs.cropper.getCropBlob((data) => {\r\n                //         aLink.href = window.URL.createObjectURL(data)\r\n                //         aLink.click()\r\n                //     })\r\n                // } else {\r\n                //     this.$refs.cropper.getCropData((data) => {\r\n                //         aLink.href = data\r\n                //         aLink.click()\r\n                //     })\r\n                // }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n    .cropper-wrap{\r\n        .upload{\r\n            display: inline-block;\r\n        }\r\n\r\n        .upload-demo .el-upload-dragger {\r\n            width: auto;\r\n            height: auto;\r\n        }\r\n\r\n        .cropper-content .cropper {\r\n            width: auto;\r\n            height: 300px;\r\n        }\r\n\r\n        .previewImg {\r\n            width: 50%;\r\n            margin: 0 auto;\r\n            text-align: center;\r\n        }\r\n\r\n        .previewImg img {\r\n            width: 100%;\r\n        }\r\n\r\n        .preview {\r\n            display: inline-block;\r\n        }\r\n\r\n        .preview .imgWrap {\r\n            width: 150px;\r\n            height: 180px;\r\n            overflow: hidden;\r\n            position: relative;\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04);\r\n            position: relative;\r\n            margin-left: 10px;\r\n            display: inline-block;\r\n        }\r\n\r\n        .imgWrap img {\r\n            width: 100%;\r\n        }\r\n\r\n        .imgWrap .hoverImg {\r\n            position: absolute;\r\n            left: 0;\r\n            top: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            padding-top: 20%;\r\n            cursor: default;\r\n            text-align: center;\r\n            color: #fff;\r\n            /*opacity: 0.5;*/\r\n            font-size: 20px;\r\n            background-color: rgba(0, 0, 0, .5);\r\n            transition: opacity .3s;\r\n        }\r\n\r\n        .imgzoomin, .imgdownload, .imgdelete {\r\n            cursor: pointer;\r\n        }\r\n\r\n        .imgdownload, .imgdelete {\r\n            margin-left: 5px;\r\n        }\r\n    }\r\n</style>\r\n"]}]}