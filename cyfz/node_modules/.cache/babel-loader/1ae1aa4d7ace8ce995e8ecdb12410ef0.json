{"remainingRequest":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js!D:\\vueWorkspace\\cyfz\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\vueWorkspace\\cyfz\\src\\axios\\filter.js","dependencies":[{"path":"D:\\vueWorkspace\\cyfz\\src\\axios\\filter.js","mtime":1572426573018},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport VueAxios from 'vue-axios';\nimport Vue from 'vue';\nimport ElementUI, { Loading } from 'element-ui'; //import Qs from 'qs'\n\nvar loading; //定义loading变量\n\nfunction startLoading() {\n  //使用Element loading-start 方法\n  loading = Loading.service({\n    lock: true,\n    text: '请稍等...',\n    background: 'rgba(0, 0, 0, 0.2)'\n  });\n}\n\nfunction endLoading() {\n  //使用Element loading-close 方法\n  loading.close();\n}\n\nvar needLoadingRequestCount = 0;\nexport function showFullScreenLoading() {\n  if (needLoadingRequestCount === 0) {\n    startLoading();\n  }\n\n  needLoadingRequestCount++;\n}\nexport function tryHideFullScreenLoading() {\n  if (needLoadingRequestCount <= 0) return;\n  needLoadingRequestCount--;\n\n  if (needLoadingRequestCount === 0) {\n    endLoading();\n  }\n} //axios配置和处理\n\nVue.use(VueAxios, axios);\naxios.defaults.baseURL = '/axios'; //项目的的基础url\n// axios.defaults.baseURL = '/';//项目的的基础url\n\naxios.defaults.headers.common['Authorization'] = \"\"; //请求token信息配置\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'; //请求type设置\n\naxios.defaults.timeout = 30000; //在超时前，所有请求都会等待30秒\n// 添加请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  /* let newdata = Qs.stringify(config.data);\r\n   config.data = newdata;*/\n  // 在发送请求之前处理\n  // config.headers.common['Authorization'] = localStorage.getItem('Authorization');//判断token在前台session中是否存在\n  showFullScreenLoading();\n  return config;\n}, function (error) {\n  // 对请求错误做处理\n  return Promise.reject(error);\n}); // 添加响应拦截器\n\naxios.interceptors.response.use(function (response) {\n  // 对响应数据处理\n  tryHideFullScreenLoading();\n\n  if (response && response.status == 200) {\n    if (response.data.exceptionMes) {\n      ElementUI.MessageBox({\n        type: 'info',\n        title: response.data.exceptionMes,\n        message: response.data.debugMes\n      });\n    }\n\n    return response.data;\n  }\n\n  return response;\n}, function (error) {\n  tryHideFullScreenLoading(); // 对响应错误处理\n\n  if (error.response && error.response.status == 401) {\n    //去登陆 执行login\n    localStorage.removeItem('Authorization');\n    window.location.reload();\n  }\n\n  if (error.response && error.response.status == 500) {\n    ElementUI.MessageBox({\n      title: '提示',\n      message: '服务器未启动或正在重启，请稍后再试！'\n    });\n  }\n\n  return Promise.reject(error);\n});\nVue.prototype.$axios = axios; //定义调用方式",{"version":3,"sources":["D:\\vueWorkspace\\cyfz\\src\\axios\\filter.js"],"names":["axios","VueAxios","Vue","ElementUI","Loading","loading","startLoading","service","lock","text","background","endLoading","close","needLoadingRequestCount","showFullScreenLoading","tryHideFullScreenLoading","use","defaults","baseURL","headers","common","post","timeout","interceptors","request","config","error","Promise","reject","response","status","data","exceptionMes","MessageBox","type","title","message","debugMes","localStorage","removeItem","window","location","reload","prototype","$axios"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport VueAxios from 'vue-axios'\r\nimport Vue from 'vue'\r\nimport ElementUI, {Loading} from 'element-ui';\r\n//import Qs from 'qs'\r\n\r\nlet loading        //定义loading变量\r\n\r\nfunction startLoading() {    //使用Element loading-start 方法\r\n    loading = Loading.service({\r\n        lock: true,\r\n        text: '请稍等...',\r\n        background: 'rgba(0, 0, 0, 0.2)'\r\n    })\r\n}\r\nfunction endLoading() {    //使用Element loading-close 方法\r\n    loading.close()\r\n}\r\n\r\nlet needLoadingRequestCount = 0\r\nexport function showFullScreenLoading() {\r\n    if (needLoadingRequestCount === 0) {\r\n        startLoading()\r\n    }\r\n    needLoadingRequestCount++\r\n}\r\n\r\nexport function tryHideFullScreenLoading() {\r\n    if (needLoadingRequestCount <= 0) return\r\n    needLoadingRequestCount--\r\n    if (needLoadingRequestCount === 0) {\r\n        endLoading()\r\n    }\r\n}\r\n\r\n\r\n//axios配置和处理\r\nVue.use(VueAxios, axios);\r\n axios.defaults.baseURL = '/axios';//项目的的基础url\r\n// axios.defaults.baseURL = '/';//项目的的基础url\r\naxios.defaults.headers.common['Authorization'] = \"\";//请求token信息配置\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';//请求type设置\r\naxios.defaults.timeout = 30000;//在超时前，所有请求都会等待30秒\r\n// 添加请求拦截器\r\naxios.interceptors.request.use(function (config) {\r\n    /* let newdata = Qs.stringify(config.data);\r\n     config.data = newdata;*/\r\n    // 在发送请求之前处理\r\n    // config.headers.common['Authorization'] = localStorage.getItem('Authorization');//判断token在前台session中是否存在\r\n    showFullScreenLoading();\r\n    return config;\r\n}, function (error) {\r\n    // 对请求错误做处理\r\n    return Promise.reject(error);\r\n});\r\n// 添加响应拦截器\r\naxios.interceptors.response.use(function (response) {\r\n    // 对响应数据处理\r\n    tryHideFullScreenLoading();\r\n    if (response && (response.status == 200)) {\r\n        if (response.data.exceptionMes) {\r\n            ElementUI.MessageBox({\r\n                type: 'info',\r\n                title: response.data.exceptionMes,\r\n                message: response.data.debugMes\r\n            });\r\n        }\r\n        return response.data;\r\n\r\n    }\r\n    return response;\r\n}, function (error) {\r\n    tryHideFullScreenLoading();\r\n    // 对响应错误处理\r\n    if (error.response && error.response.status == 401) {\r\n        //去登陆 执行login\r\n        localStorage.removeItem('Authorization');\r\n        window.location.reload();\r\n    }\r\n    if (error.response && error.response.status == 500) {\r\n        ElementUI.MessageBox({\r\n            title: '提示',\r\n            message: '服务器未启动或正在重启，请稍后再试！'\r\n        });\r\n    }\r\n    return Promise.reject(error);\r\n});\r\nVue.prototype.$axios = axios;//定义调用方式\r\n"]}]}