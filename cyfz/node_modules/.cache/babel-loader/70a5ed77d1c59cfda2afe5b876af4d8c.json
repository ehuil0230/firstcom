{"remainingRequest":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js!D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vueWorkspace\\cyfz\\src\\views\\xtgl\\menuPage\\refreshRedis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vueWorkspace\\cyfz\\src\\views\\xtgl\\menuPage\\refreshRedis.vue","mtime":1571715009206},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TableList from \"../../../components/grid/TableList\";\nexport default {\n  name: \"refreshRedis\",\n  components: {\n    TableList: TableList\n  },\n  data: function data() {\n    return {\n      checkedData: [],\n      //全选框\n      //表单字段\n      columns: [{\n        label: '表名',\n        prop: 'tableName'\n      },\n      /*{\n          label: '索引列',\n          prop: 'indexColumns'\n      },*/\n      {\n        label: 'SQL脚本',\n        prop: 'dataQuerySql'\n      }, {\n        label: '分组列',\n        prop: 'groupIndex'\n      }, {\n        label: '存储类型',\n        prop: 'redisType'\n      }],\n      //调用组件传输返回页面数据\n      getDataWay: {\n        dataType: \"url\",\n        data: this.$api.xtglApi.queryRedisTable,\n        type: \"post\",\n        param: {}\n      }\n    };\n  },\n  methods: {\n    //直接全部刷新\n    refreshTable: function refreshTable() {\n      var _this = this;\n\n      var that = this;\n      this.$$request({\n        method: 'post',\n        url: this.$api.xtglApi.refreshRedis,\n        data: {\n          'tableName': ''\n        }\n      }).then(function (res) {\n        if (res.result == 1) {\n          that.$message({\n            message: '缓存刷新成功！',\n            type: 'success'\n          });\n        } else {\n          that.$message({\n            message: '缓存刷新失败!',\n            type: 'error'\n          });\n        }\n\n        _this.checkedData = [];\n\n        _this.$refs.table.loadData();\n      }).catch(function (err) {\n        that.$alert(err, \"系统异常，请联系管理员！\", {});\n      });\n    },\n    //页面刷新\n    refreshTable2: function refreshTable2() {\n      var _this2 = this;\n\n      var that = this;\n      var refreshParam = ''; //暂时无批量刷新，但可一键刷新全部\n\n      if (this.checkedData.length > 1) {\n        this.$alert('请选中一条数据进行刷新！', '提示', {\n          type: 'warning'\n        });\n        return false;\n      } else if (this.checkedData.length == 1) {\n        //预留批量刷新方法\n        this.checkedData.forEach(function (item) {\n          refreshParam += item.tableName + ',';\n        });\n      }\n\n      this.$$request({\n        method: 'post',\n        url: this.$api.xtglApi.refreshRedis,\n        data: {\n          'tableName': refreshParam\n        }\n      }).then(function (res) {\n        if (res.result == 1) {\n          that.$message({\n            message: '缓存刷新成功！',\n            type: 'success'\n          });\n        } else {\n          that.$message({\n            message: '缓存刷新失败!',\n            type: 'error'\n          });\n        }\n\n        _this2.checkedData = [];\n\n        _this2.$refs.table.loadData();\n      }).catch(function (err) {\n        that.$alert(err, \"系统异常，请联系管理员！\", {});\n      });\n    }\n  }\n};",{"version":3,"sources":["refreshRedis.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"rightMain\">\r\n        <el-form :inline=\"true\"  size=\"small\" >\r\n            <div class=\"\" style=\"margin-bottom: 23px;margin-top:15px\">\r\n                <el-button size=\"small\"  type=\"primary\"  @click=\"refreshTable\"><i class=\"el-icon-refresh ywBtn\"></i>一键刷新</el-button>\r\n            </div>\r\n        </el-form>\r\n        <tableList ref=\"table\"\r\n                   selection\r\n                   index\r\n                   style=\"border-top: none;text-align: center\"\r\n                   :getDataWay=\"getDataWay\"\r\n                   :columns=\"columns\"\r\n                   :checkedData='checkedData'\r\n        >\r\n        </tableList>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TableList from \"../../../components/grid/TableList\";\r\n\r\n    export default {\r\n        name: \"refreshRedis\",\r\n        components: {\r\n            TableList,\r\n        },\r\n        data() {\r\n            return {\r\n                checkedData: [], //全选框\r\n                //表单字段\r\n                columns: [\r\n                    {\r\n                        label: '表名',\r\n                        prop: 'tableName',\r\n\r\n                    },\r\n                    /*{\r\n                        label: '索引列',\r\n                        prop: 'indexColumns'\r\n                    },*/\r\n                    {\r\n                        label: 'SQL脚本',\r\n                        prop: 'dataQuerySql',\r\n                    },\r\n                    {\r\n                        label: '分组列',\r\n                        prop: 'groupIndex'\r\n                    },\r\n                    {\r\n                        label: '存储类型',\r\n                        prop: 'redisType',\r\n\r\n                    },\r\n                    /*{\r\n                        label: '说明',\r\n                        prop: 'indexCaption',\r\n                    },*/\r\n                ],\r\n                //调用组件传输返回页面数据\r\n                getDataWay: {\r\n                    dataType: \"url\",\r\n                    data: this.$api.xtglApi.queryRedisTable,\r\n                    type: \"post\",\r\n                    param: {},\r\n                },\r\n            }\r\n        },\r\n        methods: {\r\n            //直接全部刷新\r\n            refreshTable() {\r\n                const that = this\r\n                this.$$request({\r\n                    method:'post',\r\n                    url:this.$api.xtglApi.refreshRedis,\r\n                    data:{\r\n                        'tableName': ''\r\n                    },\r\n                }).then(res => {\r\n                    if(res.result == 1){\r\n                        that.$message({\r\n                            message: '缓存刷新成功！',\r\n                            type: 'success'\r\n                        })\r\n                    }else{\r\n                        that.$message({\r\n                            message: '缓存刷新失败!',\r\n                            type: 'error'\r\n                        })\r\n                    }\r\n                    this.checkedData = [];\r\n                    this.$refs.table.loadData()\r\n                }).catch(function (err) {\r\n                    that.$alert(err, \"系统异常，请联系管理员！\", {});\r\n                })\r\n            },\r\n            //页面刷新\r\n            refreshTable2() {\r\n                const that = this\r\n                let refreshParam = ''\r\n                //暂时无批量刷新，但可一键刷新全部\r\n                if(this.checkedData.length > 1) {\r\n                    this.$alert('请选中一条数据进行刷新！','提示',{\r\n                        type: 'warning'\r\n                    })\r\n                    return false\r\n                }else if(this.checkedData.length == 1) {\r\n                    //预留批量刷新方法\r\n                    this.checkedData.forEach((item) => {\r\n                        refreshParam += (item.tableName + ',')\r\n                    })\r\n                }\r\n                this.$$request({\r\n                    method:'post',\r\n                    url:this.$api.xtglApi.refreshRedis,\r\n                    data:{\r\n                        'tableName': refreshParam\r\n                    },\r\n                }).then(res => {\r\n                    if(res.result == 1){\r\n                        that.$message({\r\n                            message: '缓存刷新成功！',\r\n                            type: 'success'\r\n                        })\r\n                    }else{\r\n                        that.$message({\r\n                            message: '缓存刷新失败!',\r\n                            type: 'error'\r\n                        })\r\n                    }\r\n                    this.checkedData = [];\r\n                    this.$refs.table.loadData()\r\n                }).catch(function (err) {\r\n                    that.$alert(err, \"系统异常，请联系管理员！\", {});\r\n                })\r\n            },\r\n        },\r\n    }\r\n\r\n\r\n\r\n\r\n</script>\r\n<style scoped>\r\n    /*.screenFilter{\r\n       overflow-x: hidden;\r\n       overflow-y: hidden;\r\n   }*/\r\n    .rightMain {\r\n        margin: 10px auto;\r\n        width: 93%;\r\n        /*margin-right: 90px;\r\n        align:0 auto;\r\n        padding-left: 10px;\r\n        padding-top: 20px;\r\n        min-width: 150px;*/\r\n    }\r\n\r\n    .task-form-item{\r\n        margin-left: 359px;\r\n        display: inline-block;\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .task-btn-item {\r\n        padding-top: 0;\r\n        display: inline-block;\r\n        margin-left: 0px;\r\n        vertical-align: middle;\r\n        float: left;\r\n        padding-left: 10px;\r\n    }\r\n</style>"],"sourceRoot":"src/views/xtgl/menuPage"}]}