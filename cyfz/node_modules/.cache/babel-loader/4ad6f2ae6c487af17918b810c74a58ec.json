{"remainingRequest":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js!D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vueWorkspace\\cyfz\\src\\components\\echarts\\Histogram.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vueWorkspace\\cyfz\\src\\components\\echarts\\Histogram.vue","mtime":1570845560487},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport echarts from 'echarts';\nexport default {\n  name: \"Histogram\",\n  props: {\n    HistogramData: {\n      data: [],\n      color: {\n        //柱子颜色\n        type: Array,\n        default: ['#02a7b9']\n      },\n      name: String,\n      //标题  不需要标题可不传\n      download: {\n        //是否显示下载按钮\n        type: Boolean,\n        default: false\n      },\n      showNumber: {\n        //柱顶是否显示具体数值\n        type: Boolean,\n        default: false\n      },\n      rotate: {\n        //标签字体旋转角度 不传默认不旋转\n        default: [0]\n      },\n      xName: {\n        //x轴名字\n        type: String,\n        default: ''\n      },\n      yName: {\n        //y轴名字\n        type: String,\n        default: ''\n      }\n    }\n  },\n  data: function data() {\n    return {\n      xData: [],\n      //x轴数据\n      yData: [],\n      //y轴数据\n      color: this.HistogramData.color,\n      name: this.HistogramData.name,\n      download: this.HistogramData.download,\n      showNumber: this.HistogramData.showNumber,\n      rotate: this.HistogramData.rotate,\n      //标签字体旋转角度 不传默认不旋转\n      xName: this.HistogramData.xName,\n      //x轴名字\n      yName: this.HistogramData.yName //y轴名字\n\n    };\n  },\n  mounted: function mounted() {\n    if (this.HistogramData.url) {\n      this.getData();\n    }\n  },\n  methods: {\n    // 绘制图表\n    drawLine: function drawLine() {\n      // 基于准备好的dom，初始化echarts实例\n      var id = \"echartBar\" + Math.random() * 1000;\n      this.$el.setAttribute(\"id\", id);\n      var myChartContainer = document.getElementById(id);\n      var myChartChina = echarts.init(myChartContainer); // 绘制图表\n\n      var optionMap = {\n        //柱形图配置项\n        color: this.color,\n        title: {\n          text: this.name,\n          left: 'center',\n          top: [10]\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            // 坐标轴指示器，坐标轴触发有效\n            type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'\n\n          }\n        },\n        toolbox: {\n          show: this.download,\n          top: [5],\n          right: [20],\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid: {\n          left: '5%',\n          right: '10%',\n          bottom: '5%',\n          containLabel: true\n        },\n        xAxis: {\n          name: this.xName,\n          axisLabel: {\n            interval: ['0'],\n            //标签显示间隔\n            rotate: this.rotate //标签旋转角度\n\n          },\n          type: 'category',\n          data: this.xData,\n          axisTick: {\n            alignWithLabel: true\n          }\n        },\n        yAxis: [{\n          name: this.yName,\n          type: 'value'\n        }],\n        series: [{\n          name: this.name,\n          type: 'bar',\n          barWidth: '60%',\n          data: this.yData,\n          label: {\n            normal: {\n              show: this.showNumber,\n              position: 'top',\n              textStyle: {\n                color: this.color\n              }\n            }\n          }\n        }]\n      };\n      myChartChina.setOption(optionMap);\n\n      window.onresize = function () {\n        myChartChina.resize();\n      };\n    }\n  },\n  watch: {\n    'HistogramData.data': function HistogramDataData(val) {\n      this.xData = [];\n      this.yData = [];\n\n      for (var i = 0; i < val.length; i++) {\n        this.xData.push(val[i].name);\n        this.yData.push(val[i].value);\n      }\n\n      this.name = this.HistogramData.name;\n      this.drawLine();\n    }\n  }\n};",{"version":3,"sources":["Histogram.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\r\n    柱状图组件\r\n-->\r\n<template>\r\n    <div class=\"histogram\">\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import echarts from 'echarts'\r\n\r\n    export default {\r\n        name: \"Histogram\",\r\n        props: {\r\n            HistogramData: {\r\n                data:[],\r\n                color: { //柱子颜色\r\n                    type: Array,\r\n                    default: ['#02a7b9'],\r\n                },\r\n                name: String, //标题  不需要标题可不传\r\n                download: {   //是否显示下载按钮\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n                showNumber: {  //柱顶是否显示具体数值\r\n                    type: Boolean,\r\n                    default: false\r\n                },\r\n                rotate: { //标签字体旋转角度 不传默认不旋转\r\n                    default: [0]\r\n                },\r\n                xName: { //x轴名字\r\n                    type:String,\r\n                    default:'',\r\n                },\r\n                yName: { //y轴名字\r\n                    type:String,\r\n                    default:'',\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                xData: [],//x轴数据\r\n                yData: [],//y轴数据\r\n                color: this.HistogramData.color,\r\n                name: this.HistogramData.name,\r\n                download: this.HistogramData.download,\r\n                showNumber: this.HistogramData.showNumber,\r\n                rotate: this.HistogramData.rotate,//标签字体旋转角度 不传默认不旋转\r\n                xName: this.HistogramData.xName,//x轴名字\r\n                yName: this.HistogramData.yName,//y轴名字\r\n            }\r\n        },\r\n        mounted(){\r\n            if(this.HistogramData.url){\r\n                this.getData()\r\n            }\r\n        },\r\n        methods: {\r\n            // 绘制图表\r\n            drawLine() {\r\n                // 基于准备好的dom，初始化echarts实例\r\n                let id = \"echartBar\" + Math.random() * 1000;\r\n                this.$el.setAttribute(\"id\", id);\r\n                let myChartContainer = document.getElementById(id);\r\n                let myChartChina = echarts.init(myChartContainer);\r\n                // 绘制图表\r\n                let optionMap = {  //柱形图配置项\r\n                    color: this.color,\r\n                    title: {\r\n                        text: this.name,\r\n                        left: 'center',\r\n                        top: [10],\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        axisPointer: {            // 坐标轴指示器，坐标轴触发有效\r\n                            type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'\r\n                        }\r\n                    },\r\n                    toolbox: {\r\n                        show: this.download,\r\n                        top: [5],\r\n                        right: [20],\r\n                        feature: {\r\n                            saveAsImage: {}\r\n                        }\r\n                    },\r\n                    grid: {\r\n                        left: '5%',\r\n                        right: '10%',\r\n                        bottom: '5%',\r\n                        containLabel: true\r\n                    },\r\n                    xAxis: {\r\n                        name: this.xName,\r\n                        axisLabel: {\r\n                            interval: ['0'], //标签显示间隔\r\n                            rotate: this.rotate, //标签旋转角度\r\n                        },\r\n                        type: 'category',\r\n                        data: this.xData,\r\n                        axisTick: {\r\n                            alignWithLabel: true\r\n                        }\r\n                    },\r\n                    yAxis: [\r\n                        {\r\n                            name: this.yName,\r\n                            type: 'value'\r\n                        }\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: this.name,\r\n                            type: 'bar',\r\n                            barWidth: '60%',\r\n                            data: this.yData,\r\n                            label: {\r\n                                normal: {\r\n                                    show: this.showNumber,\r\n                                    position: 'top',\r\n                                    textStyle: {\r\n                                        color: this.color,\r\n                                    }\r\n                                }\r\n                            },\r\n                        }\r\n                    ]\r\n                };\r\n                myChartChina.setOption(optionMap);\r\n                window.onresize = function () {\r\n                    myChartChina.resize();\r\n                }\r\n            },\r\n        },\r\n        watch: {\r\n            'HistogramData.data':function (val) {\r\n                this.xData = [];\r\n                this.yData = [];\r\n                for (let i = 0; i < val.length; i++) {\r\n                    this.xData.push(val[i].name);\r\n                    this.yData.push(val[i].value);\r\n                }\r\n                this.name = this.HistogramData.name;\r\n                this.drawLine();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .histogram {\r\n        width: 100%;\r\n        height: 100%;\r\n        margin: 0 auto;\r\n    }\r\n</style>\r\n"],"sourceRoot":"src/components/echarts"}]}