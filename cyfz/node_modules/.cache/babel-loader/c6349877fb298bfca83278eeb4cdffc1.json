{"remainingRequest":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js!D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vueWorkspace\\cyfz\\src\\components\\orgTree\\orgTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vueWorkspace\\cyfz\\src\\components\\orgTree\\orgTree.vue","mtime":1571707003397},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vueWorkspace\\cyfz\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"deptTree\",\n  props: {\n    treeProps: {\n      type: Object,\n      default: function _default() {\n        return {\n          label: \"label\"\n        };\n      }\n    },\n    nodeKey: {\n      type: String,\n      default: \"id\"\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    pctrl: {\n      type: String,\n      default: '/qxgl-center/Qxgl002OrgCtrl/queryOrgTreeBySjorgId'\n    }\n  },\n  data: function data() {\n    return {\n      orgTree: [],\n      searchText: \"\",\n      CurrentNode: []\n    };\n  },\n\n  /*假数据第一节点选中----白昱----start*/\n  updated: function updated() {\n    if (this.orgTree[0].code) {\n      this.$refs[this.options.ref].setCurrentKey(this.orgTree[0].code);\n      this.$emit(\"currentChange\", this.orgTree[0].code, this.orgTree[0].caption);\n    }\n  },\n\n  /*假数据第一节点选中----白昱----end*/\n  methods: {\n    currentChange: function currentChange(data, node) {\n      this.$emit(\"currentChange\", data[this.options.nodeKey], data.caption);\n    },\n    loadNode: function loadNode(node, resolve) {\n      var _this = this;\n\n      var code = node.data[this.nodeKey];\n      this.CurrentNode = node;\n      this.$axios({\n        method: 'post',\n        // url: '/qxgl-center/Qxgl002OrgCtrl/queryOrgTreeBySjorgId',\n        url: this.pctrl,\n        data: {\n          code: code\n        }\n      }).then(function (res) {\n        console.log(res.info);\n        resolve(res.info);\n        return res.info;\n      }).then(function (info) {\n        /*懒加载节点展开，第一节点选中----白昱----start*/\n        if (node.level === 0) {\n          for (var i = 0; i < info.length; i++) {\n            var mynode = node.childNodes[i];\n            mynode.expanded = true;\n\n            _this.$refs[\"org_tree\"].updateKeyChildren(info[i].code, info[i].children);\n          }\n\n          _this.$refs[\"org_tree\"].setCurrentKey(info[0].code);\n\n          _this.$emit(\"currentChange\", info[0].code, info[0].caption);\n        }\n        /*懒加载节点展开，第一节点选中----白昱----end*/\n\n      }).catch(function (error) {\n        window.console.log(error);\n      });\n    },\n    updateNode: function updateNode(key, data) {\n      var options = this.options;\n      var nodeKey = options.nodeKey;\n      var label = options.props.label;\n      var ref = options.ref;\n      var tree = this.$refs[ref];\n\n      if (tree) {\n        var node = tree.getNode({\n          code: key\n        });\n        var childrenNodes = node.childNodes;\n        var children = [];\n        var id = data[nodeKey];\n        var newFlag = true;\n        childrenNodes.forEach(function (item) {\n          var tId = item.data[nodeKey];\n\n          if (id == tId) {\n            item.data[label] = data[label];\n            newFlag = false;\n          }\n\n          children.push(item.data);\n        });\n\n        if (newFlag) {\n          children.push(data);\n        }\n\n        tree.updateKeyChildren(key, children);\n        tree.store.nodesMap[key].expanded = true;\n        this.expandParent(node.parent);\n      }\n    },\n    expandParent: function expandParent(node) {\n      var ref = this.options.ref;\n      var tree = this.$refs[ref];\n\n      if (node) {\n        var id = node.data[this.options.nodeKey];\n        tree.store.nodesMap[id].expanded = true;\n      }\n    },\n    setCurrentKey: function setCurrentKey(key) {\n      var ref = this.options.ref;\n      var tree = this.$refs[ref];\n      tree.setCurrentKey(key);\n    }\n  },\n  computed: {\n    options: function options() {\n      var currentNodeKey = \"\";\n\n      if (this.orgTree.length > 0) {\n        currentNodeKey = this.orgTree[0].code;\n      }\n\n      return {\n        class: \"org_tree\",\n        ref: \"org_tree\",\n        indent: 12,\n        nodeKey: this.nodeKey,\n        props: this.treeProps,\n        expandOnClickNode: false,\n        checkOnClickNode: true,\n        highlightCurrent: true,\n        iconClass: \"el-icon-arrow-right\",\n        currrentNodeKey: currentNodeKey,\n        defaultExpandedKeys: [currentNodeKey]\n      };\n    }\n  }\n};",{"version":3,"sources":["orgTree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <el-tree :class=\"options.class\"\r\n             :ref=\"options.ref\"\r\n             :lazy=\"lazy\"\r\n             :load=\"loadNode\"\r\n             :data=\"orgTree\"\r\n             :props=\"options.props\"\r\n             :indent=\"options.indent\"\r\n             :node-key=\"options.nodeKey\"\r\n             :expand-on-click-node=\"options.expandOnClickNode\"\r\n             :check-on-click-node=\"options.checkOnClickNode\"\r\n             :highlight-current=\"options.highlightCurrent\"\r\n             :icon-class=\"options.iconClass\"\r\n             :current-node-key=\"options.currrentNodeKey\"\r\n             :default-expanded-keys=\"options.defaultExpandedKeys\"\r\n             @current-change=\"currentChange\">\r\n        <span class=\"org_tree_node\" slot-scope=\"{ node, data }\">\r\n            <i :class=\"[node.icon?node.icon:'el-icon-notebook-2', 'org_tree_node_icon']\"></i>\r\n            <span>{{node.label}}</span>\r\n        </span>\r\n    </el-tree>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"deptTree\",\r\n        props: {\r\n            treeProps: {\r\n                type: Object,\r\n                default: () => {\r\n                    return {\r\n                        label: \"label\"\r\n                    }\r\n                }\r\n            },\r\n            nodeKey: {\r\n                type: String,\r\n                default: \"id\"\r\n            },\r\n            lazy: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            pctrl: {\r\n                type: String,\r\n                default: '/qxgl-center/Qxgl002OrgCtrl/queryOrgTreeBySjorgId'\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                orgTree: [],\r\n                searchText: \"\",\r\n                CurrentNode: []\r\n            }\r\n        },\r\n        /*假数据第一节点选中----白昱----start*/\r\n        updated() {\r\n            if(this.orgTree[0].code){\r\n                this.$refs[this.options.ref].setCurrentKey(this.orgTree[0].code)\r\n                this.$emit(\"currentChange\",this.orgTree[0].code, this.orgTree[0].caption);\r\n            }\r\n        },\r\n        /*假数据第一节点选中----白昱----end*/\r\n        methods: {\r\n            currentChange(data, node) {\r\n                this.$emit(\"currentChange\", data[this.options.nodeKey], data.caption);\r\n            },\r\n            loadNode(node, resolve) {\r\n                let code = node.data[this.nodeKey]\r\n                this.CurrentNode = node;\r\n                this.$axios({\r\n                    method: 'post',\r\n                    // url: '/qxgl-center/Qxgl002OrgCtrl/queryOrgTreeBySjorgId',\r\n                    url: this.pctrl,\r\n                    data: {\r\n                        code: code\r\n                    }\r\n                }).then(function (res) {\r\n                    console.log(res.info)\r\n                    resolve(res.info)\r\n                    return res.info;\r\n                }).then((info) => {\r\n                    /*懒加载节点展开，第一节点选中----白昱----start*/\r\n                    if (node.level === 0) {\r\n                        for (let i = 0; i < info.length; i++) {\r\n                            let mynode = node.childNodes[i];\r\n                            mynode.expanded = true;\r\n                            this.$refs[\"org_tree\"].updateKeyChildren(info[i].code, info[i].children)\r\n                        }\r\n                        this.$refs[\"org_tree\"].setCurrentKey(info[0].code)\r\n                        this.$emit(\"currentChange\", info[0].code, info[0].caption);\r\n                    }\r\n                    /*懒加载节点展开，第一节点选中----白昱----end*/\r\n                }).catch(function (error) {\r\n                    window.console.log(error);\r\n                });\r\n            },\r\n            updateNode(key, data) {\r\n                let options = this.options\r\n                let nodeKey = options.nodeKey\r\n                let label = options.props.label\r\n                let ref = options.ref\r\n                let tree = this.$refs[ref]\r\n                if (tree) {\r\n                    let node = tree.getNode({\r\n                        code: key\r\n                    })\r\n                    let childrenNodes = node.childNodes\r\n                    let children = []\r\n                    let id = data[nodeKey]\r\n                    let newFlag = true\r\n                    childrenNodes.forEach((item) => {\r\n                        let tId = item.data[nodeKey]\r\n                        if (id == tId) {\r\n                            item.data[label] = data[label]\r\n                            newFlag = false\r\n                        }\r\n                        children.push(item.data)\r\n                    })\r\n                    if (newFlag) {\r\n                        children.push(data)\r\n                    }\r\n                    tree.updateKeyChildren(key, children)\r\n                    tree.store.nodesMap[key].expanded = true;\r\n                    this.expandParent(node.parent)\r\n                }\r\n            },\r\n            expandParent(node) {\r\n                let ref = this.options.ref\r\n                let tree = this.$refs[ref]\r\n                if (node) {\r\n                    let id = node.data[this.options.nodeKey]\r\n                    tree.store.nodesMap[id].expanded = true;\r\n                }\r\n            },\r\n            setCurrentKey(key) {\r\n                let ref = this.options.ref\r\n                let tree = this.$refs[ref]\r\n                tree.setCurrentKey(key)\r\n            }\r\n        }, computed: {\r\n            options() {\r\n                let currentNodeKey = \"\"\r\n                if (this.orgTree.length > 0) {\r\n                    currentNodeKey = this.orgTree[0].code\r\n                }\r\n\r\n                return {\r\n                    class: \"org_tree\",\r\n                    ref: \"org_tree\",\r\n                    indent: 12,\r\n                    nodeKey: this.nodeKey,\r\n                    props: this.treeProps,\r\n                    expandOnClickNode: false,\r\n                    checkOnClickNode: true,\r\n                    highlightCurrent: true,\r\n                    iconClass: \"el-icon-arrow-right\",\r\n                    currrentNodeKey: currentNodeKey,\r\n                    defaultExpandedKeys: [currentNodeKey]\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    /*部门树样式*/\r\n    .org_main_container {\r\n        height: 100%;\r\n        font-size: 12px !important;\r\n    }\r\n\r\n    .org_main_container > .el-aside {\r\n        box-shadow: 0 1px 6px 0 rgba(0, 0, 0, .12);\r\n    }\r\n\r\n    .org_container {\r\n        background-color: @bgWhite;\r\n        height: 100%;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .org_container > .el-main {\r\n        height: 200px;\r\n        padding: 0px;\r\n        padding-left: 14px;\r\n        overflow-y: scroll;\r\n        margin-right: -17px;\r\n        padding-right: 17px;\r\n    }\r\n\r\n    .org_tree {\r\n    }\r\n\r\n    .org_tree_node_icon {\r\n        color: @themeColor;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    /*深度选择器\"/deep/\"*/\r\n    .org_tree /deep/ .el-tree-node__content:hover {\r\n        background-color: transparent;\r\n        color: @themeColor;\r\n    }\r\n\r\n    .org_tree .org_tree_node > span {\r\n        padding: 3px 4px;\r\n    }\r\n\r\n    .org_tree /deep/ .el-tree-node:focus > .el-tree-node__content {\r\n        background-color: transparent;\r\n    }\r\n\r\n    .org_tree.el-tree--highlight-current /deep/ .el-tree-node.is-current > .el-tree-node__content {\r\n        background-color: transparent;\r\n    }\r\n\r\n    .org_tree.el-tree--highlight-current /deep/ .el-tree-node.is-current > .el-tree-node__content > .org_tree_node > span {\r\n        background-color: @themeColor;\r\n        color: @bgWhite;\r\n    }\r\n\r\n    .tree_title {\r\n        font-size: 12px;\r\n        color: @textColor2;\r\n        line-height: 32px;\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .tree_title > i {\r\n        font-size: 21px;\r\n        margin-right: 5px;\r\n        vertical-align: middle;\r\n    }\r\n\r\n    /deep/ .search_input {\r\n        margin: 20px 0px;\r\n    }\r\n\r\n    /deep/ .search_input .el-input__inner {\r\n        height: 32px;\r\n        line-height: 32px;\r\n    }\r\n\r\n    /deep/ .search_input .el-input__icon {\r\n        line-height: 32px;\r\n    }\r\n\r\n    .org_main_container > .el-main {\r\n        padding: 0px;\r\n        width: 20px;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    .tree_toggle {\r\n        width: 16px;\r\n        height: 60px;\r\n        background: #B5B5B5;\r\n        border-radius: 0 100px 100px 0;\r\n        cursor: pointer;\r\n        font-size: 16px;\r\n        line-height: 60px;\r\n        color: @bgWhite;\r\n    }\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/orgTree"}]}